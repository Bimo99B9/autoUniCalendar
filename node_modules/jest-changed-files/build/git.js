'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
<<<<<<< HEAD
exports.default = void 0;

function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
    return data;
  };

  return data;
}

function _execa() {
  const data = _interopRequireDefault(require('execa'));

  _execa = function () {
    return data;
  };

  return data;
=======

var _path;

function _load_path() {
  return (_path = _interopRequireDefault(require('path')));
}

var _child_process;

function _load_child_process() {
  return (_child_process = _interopRequireDefault(require('child_process')));
>>>>>>> 2cfd330b (move react to root dir)
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

<<<<<<< HEAD
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
=======
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
      arr2[i] = arr[i];
    return arr2;
  } else {
    return Array.from(arr);
  }
}

function _asyncToGenerator(fn) {
  return function() {
    var gen = fn.apply(this, arguments);
    return new Promise(function(resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(
            function(value) {
              step('next', value);
            },
            function(err) {
              step('throw', err);
            }
          );
        }
      }
      return step('next');
    });
  };
}
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
>>>>>>> 2cfd330b (move react to root dir)
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
<<<<<<< HEAD
 */
const findChangedFilesUsingCommand = async (args, cwd) => {
  let result;

  try {
    result = await (0, _execa().default)('git', args, {
      cwd
    });
  } catch (e) {
    // TODO: Should we keep the original `message`?
    e.message = e.stderr;
    throw e;
  }

  return result.stdout
    .split('\n')
    .filter(s => s !== '')
    .map(changedPath => path().resolve(cwd, changedPath));
};

const adapter = {
  findChangedFiles: async (cwd, options) => {
    var _options$includePaths;

    const changedSince = options.withAncestor ? 'HEAD^' : options.changedSince;
    const includePaths = (
      (_options$includePaths = options.includePaths) !== null &&
      _options$includePaths !== void 0
        ? _options$includePaths
        : []
    ).map(absoluteRoot => path().normalize(path().relative(cwd, absoluteRoot)));

    if (options.lastCommit) {
      return findChangedFilesUsingCommand(
        ['show', '--name-only', '--pretty=format:', 'HEAD', '--'].concat(
          includePaths
        ),
        cwd
      );
    }

    if (changedSince) {
      const [committed, staged, unstaged] = await Promise.all([
        findChangedFilesUsingCommand(
          ['diff', '--name-only', `${changedSince}...HEAD`, '--'].concat(
            includePaths
          ),
          cwd
        ),
        findChangedFilesUsingCommand(
          ['diff', '--cached', '--name-only', '--'].concat(includePaths),
          cwd
        ),
        findChangedFilesUsingCommand(
          [
            'ls-files',
            '--other',
            '--modified',
            '--exclude-standard',
            '--'
          ].concat(includePaths),
          cwd
        )
      ]);
      return [...committed, ...staged, ...unstaged];
    }

    const [staged, unstaged] = await Promise.all([
      findChangedFilesUsingCommand(
        ['diff', '--cached', '--name-only', '--'].concat(includePaths),
        cwd
      ),
      findChangedFilesUsingCommand(
        [
          'ls-files',
          '--other',
          '--modified',
          '--exclude-standard',
          '--'
        ].concat(includePaths),
        cwd
      )
    ]);
    return [...staged, ...unstaged];
  },
  getRoot: async cwd => {
    const options = ['rev-parse', '--show-cdup'];

    try {
      const result = await (0, _execa().default)('git', options, {
        cwd
      });
      return path().resolve(cwd, result.stdout);
    } catch {
      return null;
    }
  }
};
var _default = adapter;
exports.default = _default;
=======
 *
 */

const findChangedFilesUsingCommand = (() => {
  var _ref = _asyncToGenerator(function*(args, cwd) {
    return new Promise(function(resolve, reject) {
      const child = (_child_process || _load_child_process()).default.spawn(
        'git',
        args,
        {cwd: cwd}
      );
      let stdout = '';
      let stderr = '';
      child.stdout.on('data', function(data) {
        return (stdout += data);
      });
      child.stderr.on('data', function(data) {
        return (stderr += data);
      });
      child.on('error', function(e) {
        return reject(e);
      });
      child.on('close', function(code) {
        if (code === 0) {
          stdout = stdout.trim();
          if (stdout === '') {
            resolve([]);
          } else {
            resolve(
              stdout
                .split('\n')
                .filter(function(s) {
                  return s !== '';
                })
                .map(function(changedPath) {
                  return (_path || _load_path()).default.resolve(
                    cwd,
                    changedPath
                  );
                })
            );
          }
        } else {
          reject(code + ': ' + stderr);
        }
      });
    });
  });

  return function findChangedFilesUsingCommand(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

const adapter = {
  findChangedFiles: (() => {
    var _ref2 = _asyncToGenerator(function*(cwd, options) {
      const changedSince =
        options && (options.withAncestor ? 'HEAD^' : options.changedSince);

      const includePaths = (options && options.includePaths) || [];

      if (options && options.lastCommit) {
        return yield findChangedFilesUsingCommand(
          ['show', '--name-only', '--pretty=%b', 'HEAD'].concat(includePaths),
          cwd
        );
      } else if (changedSince) {
        const committed = yield findChangedFilesUsingCommand(
          [
            'log',
            '--name-only',
            '--pretty=%b',
            'HEAD',
            `^${changedSince}`
          ].concat(includePaths),
          cwd
        );
        const staged = yield findChangedFilesUsingCommand(
          ['diff', '--cached', '--name-only'].concat(includePaths),
          cwd
        );
        const unstaged = yield findChangedFilesUsingCommand(
          ['ls-files', '--other', '--modified', '--exclude-standard'].concat(
            includePaths
          ),
          cwd
        );
        return [].concat(
          _toConsumableArray(committed),
          _toConsumableArray(staged),
          _toConsumableArray(unstaged)
        );
      } else {
        return yield findChangedFilesUsingCommand(
          ['ls-files', '--other', '--modified', '--exclude-standard'].concat(
            includePaths
          ),
          cwd
        );
      }
    });

    return function findChangedFiles(_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  })(),

  getRoot: (() => {
    var _ref3 = _asyncToGenerator(function*(cwd) {
      return new Promise(function(resolve) {
        try {
          let stdout = '';
          const options = ['rev-parse', '--show-toplevel'];
          const child = (_child_process || _load_child_process()).default.spawn(
            'git',
            options,
            {cwd: cwd}
          );
          child.stdout.on('data', function(data) {
            return (stdout += data);
          });
          child.on('error', function() {
            return resolve(null);
          });
          child.on('close', function(code) {
            return resolve(code === 0 ? stdout.trim() : null);
          });
        } catch (e) {
          resolve(null);
        }
      });
    });

    return function getRoot(_x5) {
      return _ref3.apply(this, arguments);
    };
  })()
};

exports.default = adapter;
>>>>>>> 2cfd330b (move react to root dir)
