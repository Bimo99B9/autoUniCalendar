/**
 * @fileoverview Rule to flag use of ternary operators.
 * @author Ian Christian Myers
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

<<<<<<< HEAD
/** @type {import('../shared/types').Rule} */
=======
>>>>>>> 2cfd330b (move react to root dir)
module.exports = {
    meta: {
        type: "suggestion",

        docs: {
<<<<<<< HEAD
            description: "Disallow ternary operators",
=======
            description: "disallow ternary operators",
            category: "Stylistic Issues",
>>>>>>> 2cfd330b (move react to root dir)
            recommended: false,
            url: "https://eslint.org/docs/rules/no-ternary"
        },

<<<<<<< HEAD
        schema: [],

        messages: {
            noTernaryOperator: "Ternary operator used."
        }
=======
        schema: []
>>>>>>> 2cfd330b (move react to root dir)
    },

    create(context) {

        return {

            ConditionalExpression(node) {
<<<<<<< HEAD
                context.report({ node, messageId: "noTernaryOperator" });
=======
                context.report({ node, message: "Ternary operator used." });
>>>>>>> 2cfd330b (move react to root dir)
            }

        };

    }
};
