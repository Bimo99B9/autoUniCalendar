/**
 * @fileoverview Disallows or enforces spaces inside computed properties.
 * @author Jamund Ferguson
 */
"use strict";

<<<<<<< HEAD
const astUtils = require("./utils/ast-utils");
=======
const astUtils = require("../util/ast-utils");
>>>>>>> 2cfd330b (move react to root dir)

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

<<<<<<< HEAD
/** @type {import('../shared/types').Rule} */
=======
>>>>>>> 2cfd330b (move react to root dir)
module.exports = {
    meta: {
        type: "layout",

        docs: {
<<<<<<< HEAD
            description: "Enforce consistent spacing inside computed property brackets",
=======
            description: "enforce consistent spacing inside computed property brackets",
            category: "Stylistic Issues",
>>>>>>> 2cfd330b (move react to root dir)
            recommended: false,
            url: "https://eslint.org/docs/rules/computed-property-spacing"
        },

        fixable: "whitespace",

        schema: [
            {
                enum: ["always", "never"]
<<<<<<< HEAD
            },
            {
                type: "object",
                properties: {
                    enforceForClassMembers: {
                        type: "boolean",
                        default: true
                    }
                },
                additionalProperties: false
=======
>>>>>>> 2cfd330b (move react to root dir)
            }
        ],

        messages: {
            unexpectedSpaceBefore: "There should be no space before '{{tokenValue}}'.",
            unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.",

            missingSpaceBefore: "A space is required before '{{tokenValue}}'.",
            missingSpaceAfter: "A space is required after '{{tokenValue}}'."
        }
    },

    create(context) {
        const sourceCode = context.getSourceCode();
        const propertyNameMustBeSpaced = context.options[0] === "always"; // default is "never"
<<<<<<< HEAD
        const enforceForClassMembers = !context.options[1] || context.options[1].enforceForClassMembers;
=======
>>>>>>> 2cfd330b (move react to root dir)

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        /**
         * Reports that there shouldn't be a space after the first token
<<<<<<< HEAD
         * @param {ASTNode} node The node to report in the event of an error.
         * @param {Token} token The token to use for the report.
         * @param {Token} tokenAfter The token after `token`.
=======
         * @param {ASTNode} node - The node to report in the event of an error.
         * @param {Token} token - The token to use for the report.
         * @param {Token} tokenAfter - The token after `token`.
>>>>>>> 2cfd330b (move react to root dir)
         * @returns {void}
         */
        function reportNoBeginningSpace(node, token, tokenAfter) {
            context.report({
                node,
<<<<<<< HEAD
                loc: { start: token.loc.end, end: tokenAfter.loc.start },
=======
                loc: token.loc.start,
>>>>>>> 2cfd330b (move react to root dir)
                messageId: "unexpectedSpaceAfter",
                data: {
                    tokenValue: token.value
                },
                fix(fixer) {
                    return fixer.removeRange([token.range[1], tokenAfter.range[0]]);
                }
            });
        }

        /**
         * Reports that there shouldn't be a space before the last token
<<<<<<< HEAD
         * @param {ASTNode} node The node to report in the event of an error.
         * @param {Token} token The token to use for the report.
         * @param {Token} tokenBefore The token before `token`.
=======
         * @param {ASTNode} node - The node to report in the event of an error.
         * @param {Token} token - The token to use for the report.
         * @param {Token} tokenBefore - The token before `token`.
>>>>>>> 2cfd330b (move react to root dir)
         * @returns {void}
         */
        function reportNoEndingSpace(node, token, tokenBefore) {
            context.report({
                node,
<<<<<<< HEAD
                loc: { start: tokenBefore.loc.end, end: token.loc.start },
=======
                loc: token.loc.start,
>>>>>>> 2cfd330b (move react to root dir)
                messageId: "unexpectedSpaceBefore",
                data: {
                    tokenValue: token.value
                },
                fix(fixer) {
                    return fixer.removeRange([tokenBefore.range[1], token.range[0]]);
                }
            });
        }

        /**
         * Reports that there should be a space after the first token
<<<<<<< HEAD
         * @param {ASTNode} node The node to report in the event of an error.
         * @param {Token} token The token to use for the report.
=======
         * @param {ASTNode} node - The node to report in the event of an error.
         * @param {Token} token - The token to use for the report.
>>>>>>> 2cfd330b (move react to root dir)
         * @returns {void}
         */
        function reportRequiredBeginningSpace(node, token) {
            context.report({
                node,
<<<<<<< HEAD
                loc: token.loc,
=======
                loc: token.loc.start,
>>>>>>> 2cfd330b (move react to root dir)
                messageId: "missingSpaceAfter",
                data: {
                    tokenValue: token.value
                },
                fix(fixer) {
                    return fixer.insertTextAfter(token, " ");
                }
            });
        }

        /**
         * Reports that there should be a space before the last token
<<<<<<< HEAD
         * @param {ASTNode} node The node to report in the event of an error.
         * @param {Token} token The token to use for the report.
=======
         * @param {ASTNode} node - The node to report in the event of an error.
         * @param {Token} token - The token to use for the report.
>>>>>>> 2cfd330b (move react to root dir)
         * @returns {void}
         */
        function reportRequiredEndingSpace(node, token) {
            context.report({
                node,
<<<<<<< HEAD
                loc: token.loc,
=======
                loc: token.loc.start,
>>>>>>> 2cfd330b (move react to root dir)
                messageId: "missingSpaceBefore",
                data: {
                    tokenValue: token.value
                },
                fix(fixer) {
                    return fixer.insertTextBefore(token, " ");
                }
            });
        }

        /**
         * Returns a function that checks the spacing of a node on the property name
         * that was passed in.
         * @param {string} propertyName The property on the node to check for spacing
         * @returns {Function} A function that will check spacing on a node
         */
        function checkSpacing(propertyName) {
            return function(node) {
                if (!node.computed) {
                    return;
                }

                const property = node[propertyName];

<<<<<<< HEAD
                const before = sourceCode.getTokenBefore(property, astUtils.isOpeningBracketToken),
                    first = sourceCode.getTokenAfter(before, { includeComments: true }),
                    after = sourceCode.getTokenAfter(property, astUtils.isClosingBracketToken),
                    last = sourceCode.getTokenBefore(after, { includeComments: true });
=======
                const before = sourceCode.getTokenBefore(property),
                    first = sourceCode.getFirstToken(property),
                    last = sourceCode.getLastToken(property),
                    after = sourceCode.getTokenAfter(property);
>>>>>>> 2cfd330b (move react to root dir)

                if (astUtils.isTokenOnSameLine(before, first)) {
                    if (propertyNameMustBeSpaced) {
                        if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {
                            reportRequiredBeginningSpace(node, before);
                        }
                    } else {
                        if (sourceCode.isSpaceBetweenTokens(before, first)) {
                            reportNoBeginningSpace(node, before, first);
                        }
                    }
                }

                if (astUtils.isTokenOnSameLine(last, after)) {
                    if (propertyNameMustBeSpaced) {
                        if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {
                            reportRequiredEndingSpace(node, after);
                        }
                    } else {
                        if (sourceCode.isSpaceBetweenTokens(last, after)) {
                            reportNoEndingSpace(node, after, last);
                        }
                    }
                }
            };
        }


        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

<<<<<<< HEAD
        const listeners = {
=======
        return {
>>>>>>> 2cfd330b (move react to root dir)
            Property: checkSpacing("key"),
            MemberExpression: checkSpacing("property")
        };

<<<<<<< HEAD
        if (enforceForClassMembers) {
            listeners.MethodDefinition =
                listeners.PropertyDefinition = listeners.Property;
        }

        return listeners;

=======
>>>>>>> 2cfd330b (move react to root dir)
    }
};
