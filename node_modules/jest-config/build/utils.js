'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
<<<<<<< HEAD
exports.resolve =
  exports.replaceRootDirInPath =
  exports.isJSONString =
  exports.escapeGlobCharacters =
  exports._replaceRootDirTags =
  exports.DOCUMENTATION_NOTE =
  exports.BULLET =
    void 0;

function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  };

  return data;
}

function _jestResolve() {
  const data = _interopRequireDefault(require('jest-resolve'));

  _jestResolve = function () {
    return data;
  };

  return data;
}

function _jestValidate() {
  const data = require('jest-validate');

  _jestValidate = function () {
    return data;
  };

  return data;
=======
exports.isJSONString = exports.getTestEnvironment = exports._replaceRootDirTags = exports.replaceRootDirInPath = exports.escapeGlobCharacters = exports.resolve = exports.DOCUMENTATION_NOTE = exports.BULLET = undefined;

var _path;

function _load_path() {
  return (_path = _interopRequireDefault(require('path')));
}

var _jestValidate;

function _load_jestValidate() {
  return (_jestValidate = require('jest-validate'));
}

var _jestResolve;

function _load_jestResolve() {
  return (_jestResolve = _interopRequireDefault(require('jest-resolve')));
}

var _chalk;

function _load_chalk() {
  return (_chalk = _interopRequireDefault(require('chalk')));
>>>>>>> 2cfd330b (move react to root dir)
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

<<<<<<< HEAD
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const BULLET = _chalk().default.bold('\u25cf ');

exports.BULLET = BULLET;
const DOCUMENTATION_NOTE = `  ${_chalk().default.bold(
  'Configuration Documentation:'
)}
  https://jestjs.io/docs/configuration
`;
exports.DOCUMENTATION_NOTE = DOCUMENTATION_NOTE;

const createValidationError = message =>
  new (_jestValidate().ValidationError)(
=======
const BULLET = (exports.BULLET = (_chalk || _load_chalk()).default.bold(
  '\u25cf '
));
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

const DOCUMENTATION_NOTE = (exports.DOCUMENTATION_NOTE = `  ${(
  _chalk || _load_chalk()
).default.bold('Configuration Documentation:')}
  https://jestjs.io/docs/configuration.html
`);

const createValidationError = message =>
  new (_jestValidate || _load_jestValidate()).ValidationError(
>>>>>>> 2cfd330b (move react to root dir)
    `${BULLET}Validation Error`,
    message,
    DOCUMENTATION_NOTE
  );

<<<<<<< HEAD
const resolve = (resolver, {key, filePath, rootDir, optional}) => {
  const module = _jestResolve().default.findNodeModule(
    replaceRootDirInPath(rootDir, filePath),
    {
      basedir: rootDir,
      resolver: resolver || undefined
=======
const resolve = (exports.resolve = (resolver, _ref) => {
  let key = _ref.key,
    filePath = _ref.filePath,
    rootDir = _ref.rootDir,
    optional = _ref.optional;

  const module = (_jestResolve || _load_jestResolve()).default.findNodeModule(
    replaceRootDirInPath(rootDir, filePath),
    {
      basedir: rootDir,
      resolver: resolver
>>>>>>> 2cfd330b (move react to root dir)
    }
  );

  if (!module && !optional) {
<<<<<<< HEAD
    throw createValidationError(`  Module ${_chalk().default.bold(
      filePath
    )} in the ${_chalk().default.bold(key)} option was not found.
         ${_chalk().default.bold('<rootDir>')} is: ${rootDir}`);
  } /// can cast as string since nulls will be thrown

  return module;
};

exports.resolve = resolve;

const escapeGlobCharacters = path => path.replace(/([()*{}\[\]!?\\])/g, '\\$1');

exports.escapeGlobCharacters = escapeGlobCharacters;

const replaceRootDirInPath = (rootDir, filePath) => {
=======
    throw createValidationError(`  Module ${(
      _chalk || _load_chalk()
    ).default.bold(filePath)} in the ${(_chalk || _load_chalk()).default.bold(
      key
    )} option was not found.
         ${(_chalk || _load_chalk()).default.bold(
           '<rootDir>'
         )} is: ${rootDir}`);
  }

  return module;
});

const escapeGlobCharacters = (exports.escapeGlobCharacters = path =>
  path.replace(/([()*{}\[\]!?\\])/g, '\\$1'));

const replaceRootDirInPath = (exports.replaceRootDirInPath = (
  rootDir,
  filePath
) => {
>>>>>>> 2cfd330b (move react to root dir)
  if (!/^<rootDir>/.test(filePath)) {
    return filePath;
  }

<<<<<<< HEAD
  return path().resolve(
    rootDir,
    path().normalize('./' + filePath.substring('<rootDir>'.length))
  );
};

exports.replaceRootDirInPath = replaceRootDirInPath;

const _replaceRootDirInObject = (rootDir, config) => {
  const newConfig = {};

  for (const configKey in config) {
    newConfig[configKey] =
      configKey === 'rootDir'
        ? config[configKey]
        : _replaceRootDirTags(rootDir, config[configKey]);
  }

  return newConfig;
};

const _replaceRootDirTags = (rootDir, config) => {
  if (config == null) {
    return config;
  }

  switch (typeof config) {
    case 'object':
      if (Array.isArray(config)) {
        /// can be string[] or {}[]
        return config.map(item => _replaceRootDirTags(rootDir, item));
      }

      if (config instanceof RegExp) {
        return config;
      }

      return _replaceRootDirInObject(rootDir, config);

    case 'string':
      return replaceRootDirInPath(rootDir, config);
  }

  return config;
};

exports._replaceRootDirTags = _replaceRootDirTags;

// newtype
const isJSONString = text =>
  text != null &&
  typeof text === 'string' &&
  text.startsWith('{') &&
  text.endsWith('}');

exports.isJSONString = isJSONString;
=======
  return (_path || _load_path()).default.resolve(
    rootDir,
    (_path || _load_path()).default.normalize(
      './' + filePath.substr('<rootDir>'.length)
    )
  );
});

const _replaceRootDirInObject = (rootDir, config) => {
  if (config !== null) {
    const newConfig = {};
    for (const configKey in config) {
      newConfig[configKey] =
        configKey === 'rootDir'
          ? config[configKey]
          : _replaceRootDirTags(rootDir, config[configKey]);
    }
    return newConfig;
  }
  return config;
};

const _replaceRootDirTags = (exports._replaceRootDirTags = (
  rootDir,
  config
) => {
  switch (typeof config) {
    case 'object':
      if (Array.isArray(config)) {
        return config.map(item => _replaceRootDirTags(rootDir, item));
      }
      if (config instanceof RegExp) {
        return config;
      }
      return _replaceRootDirInObject(rootDir, config);
    case 'string':
      return replaceRootDirInPath(rootDir, config);
  }
  return config;
});

/**
 * Finds the test environment to use:
 *
 * 1. looks for jest-environment-<name> relative to project.
 * 1. looks for jest-environment-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */
const getTestEnvironment = (exports.getTestEnvironment = config => {
  const env = replaceRootDirInPath(config.rootDir, config.testEnvironment);
  let module = (_jestResolve || _load_jestResolve()).default.findNodeModule(
    `jest-environment-${env}`,
    {
      basedir: config.rootDir
    }
  );
  if (module) {
    return module;
  }

  try {
    return require.resolve(`jest-environment-${env}`);
  } catch (e) {}

  module = (_jestResolve || _load_jestResolve()).default.findNodeModule(env, {
    basedir: config.rootDir
  });
  if (module) {
    return module;
  }

  try {
    return require.resolve(env);
  } catch (e) {}

  throw createValidationError(
    `  Test environment ${(_chalk || _load_chalk()).default.bold(
      env
    )} cannot be found. Make sure the ${(_chalk || _load_chalk()).default.bold(
      'testEnvironment'
    )} configuration option points to an existing node module.`
  );
});

const isJSONString = (exports.isJSONString = text =>
  text &&
  typeof text === 'string' &&
  text.startsWith('{') &&
  text.endsWith('}'));
>>>>>>> 2cfd330b (move react to root dir)
