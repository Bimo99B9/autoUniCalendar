{"ast":null,"code":"import _objectSpread from \"/home/mier/git/epiCalendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/mier/git/epiCalendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/mier/git/epiCalendar/src/components/Settings/Checkboxes.js\";\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport classes from \"./Checkboxes.module.css\";\nimport SettingsContext from \"../../store/settings-context\"; // Component that represents the 3 checkboxes\n\nvar Checkboxes = function Checkboxes() {\n  // Access the settings context\n  var ctx = useContext(SettingsContext); // State for the checkboxes\n\n  var _useState = useState({\n    parse: true,\n    parseDisabled: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      parse = _useState2[0],\n      setParse = _useState2[1];\n\n  var _useState3 = useState({\n    experimental: true,\n    experimentalDisabled: false\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      experimental = _useState4[0],\n      setExperimental = _useState4[1];\n\n  var _useState5 = useState({\n    classParsing: true,\n    classParsingDisabled: false\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      classParse = _useState6[0],\n      setClassParse = _useState6[1]; // No dependecies as we want the checkboxes to be updated only on first render\n\n\n  useEffect(function () {\n    if (ctx.university === \"uo\") {\n      console.log(\"entra uo\");\n      setParse({\n        parse: ctx.oviedoCheck.parse,\n        parseDisabled: ctx.oviedoCheck.parseDisabled\n      });\n      setExperimental({\n        experimental: ctx.oviedoCheck.experimental,\n        experimentalDisabled: ctx.oviedoCheck.experimentalDisabled\n      });\n      setClassParse({\n        classParsing: ctx.oviedoCheck.classParsing,\n        classParsingDisabled: ctx.oviedoCheck.classParsingDisabled\n      });\n    } else if (ctx.university === \"epi\") {\n      console.log(\"entra epi\");\n      setParse({\n        parse: ctx.epiCheck.parse,\n        parseDisabled: ctx.epiCheck.parseDisabled\n      });\n      setExperimental({\n        experimental: ctx.epiCheck.experimental,\n        experimentalDisabled: ctx.epiCheck.experimentalDisabled\n      });\n      setClassParse({\n        classParsing: ctx.epiCheck.classParsing,\n        classParsingDisabled: ctx.epiCheck.classParsingDisabled\n      });\n    }\n  }, [ctx.university, ctx.update]); // Effect for updating the checkboxes\n\n  useEffect(function () {\n    ctx.parseHandler(parse.parse);\n    ctx.experimentalHandler(experimental.experimental);\n    ctx.classParsingHandler(classParse.classParsing);\n  }, [parse.parse, experimental.experimental, classParse.classParsing]); // Function that handles the checkbox change (parse or location)\n\n  var parseHandler = function parseHandler() {\n    setParse(function (previousState) {\n      return _objectSpread({}, previousState, {\n        parse: !previousState.parse\n      });\n    });\n    ctx.updateHandler(true);\n  }; // Function that handles the checkbox change (experimental or experimental-location)\n\n\n  var experimentalHandler = function experimentalHandler() {\n    setExperimental(function (previousState) {\n      return _objectSpread({}, previousState, {\n        experimental: !previousState.experimental\n      });\n    });\n    ctx.updateHandler(true);\n  }; // Function that handles the checkbox change (class-type or class-type)\n\n\n  var classParsingHandler = function classParsingHandler() {\n    setClassParse(function (previousState) {\n      return _objectSpread({}, previousState, {\n        classParsing: !previousState.classParsing\n      });\n    });\n    ctx.updateHandler(true);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.overall,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"location-parsing\",\n    checked: parse.parse,\n    onChange: parseHandler,\n    disabled: parse.parseDisabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"location-parsing\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Location parsing (EPI Gij\\xF3n)\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"experimental-parsing\",\n    checked: experimental.experimental,\n    onChange: experimentalHandler,\n    disabled: experimental.experimentalDisabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"experimental-parsing\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, \"Experimental location parsing (EPI Gij\\xF3n)\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"class-parsing\",\n    checked: classParse.classParsing,\n    onChange: classParsingHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"class-parsing\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"Class type parsing\")));\n};\n\nexport default Checkboxes;","map":{"version":3,"names":["React","useState","useEffect","useContext","classes","SettingsContext","Checkboxes","ctx","parse","parseDisabled","setParse","experimental","experimentalDisabled","setExperimental","classParsing","classParsingDisabled","classParse","setClassParse","university","console","log","oviedoCheck","epiCheck","update","parseHandler","experimentalHandler","classParsingHandler","previousState","updateHandler","overall"],"sources":["/home/mier/git/epiCalendar/src/components/Settings/Checkboxes.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\n\nimport classes from \"./Checkboxes.module.css\";\nimport SettingsContext from \"../../store/settings-context\";\n\n// Component that represents the 3 checkboxes\nconst Checkboxes = () => {\n  // Access the settings context\n  const ctx = useContext(SettingsContext);\n\n  // State for the checkboxes\n  const [parse, setParse] = useState({ parse: true, parseDisabled: false });\n  const [experimental, setExperimental] = useState({\n    experimental: true,\n    experimentalDisabled: false,\n  });\n  const [classParse, setClassParse] = useState({\n    classParsing: true,\n    classParsingDisabled: false,\n  });\n\n  // No dependecies as we want the checkboxes to be updated only on first render\n  useEffect(() => {\n    if (ctx.university === \"uo\") {\n      console.log(\"entra uo\");\n      setParse({\n        parse: ctx.oviedoCheck.parse,\n        parseDisabled: ctx.oviedoCheck.parseDisabled,\n      });\n      setExperimental({\n        experimental: ctx.oviedoCheck.experimental,\n        experimentalDisabled: ctx.oviedoCheck.experimentalDisabled,\n      });\n      setClassParse({\n        classParsing: ctx.oviedoCheck.classParsing,\n        classParsingDisabled: ctx.oviedoCheck.classParsingDisabled,\n      });\n    } else if (ctx.university === \"epi\") {\n      console.log(\"entra epi\");\n      setParse({\n        parse: ctx.epiCheck.parse,\n        parseDisabled: ctx.epiCheck.parseDisabled,\n      });\n      setExperimental({\n        experimental: ctx.epiCheck.experimental,\n        experimentalDisabled: ctx.epiCheck.experimentalDisabled,\n      });\n      setClassParse({\n        classParsing: ctx.epiCheck.classParsing,\n        classParsingDisabled: ctx.epiCheck.classParsingDisabled,\n      });\n    }\n  }, [ctx.university, ctx.update]);\n\n  // Effect for updating the checkboxes\n  useEffect(() => {\n    ctx.parseHandler(parse.parse);\n    ctx.experimentalHandler(experimental.experimental);\n    ctx.classParsingHandler(classParse.classParsing);\n  }, [parse.parse, experimental.experimental, classParse.classParsing]);\n\n  // Function that handles the checkbox change (parse or location)\n  const parseHandler = () => {\n    setParse((previousState) => ({\n      ...previousState,\n      parse: !previousState.parse,\n    }));\n    ctx.updateHandler(true);\n  };\n\n  // Function that handles the checkbox change (experimental or experimental-location)\n  const experimentalHandler = () => {\n    setExperimental((previousState) => ({\n      ...previousState,\n      experimental: !previousState.experimental,\n    }));\n    ctx.updateHandler(true);\n  };\n\n  // Function that handles the checkbox change (class-type or class-type)\n  const classParsingHandler = () => {\n    setClassParse((previousState) => ({\n      ...previousState,\n      classParsing: !previousState.classParsing,\n    }));\n    ctx.updateHandler(true);\n  };\n\n  return (\n    <div className={classes.overall}>\n      <div>\n        <input\n          type=\"checkbox\"\n          id=\"location-parsing\"\n          checked={parse.parse}\n          onChange={parseHandler}\n          disabled={parse.parseDisabled}\n        />\n        <label htmlFor=\"location-parsing\">\n          Location parsing (EPI Gijón)\n        </label>\n      </div>\n      <div>\n        <input\n          type=\"checkbox\"\n          id=\"experimental-parsing\"\n          checked={experimental.experimental}\n          onChange={experimentalHandler}\n          disabled={experimental.experimentalDisabled}\n        />\n        <label htmlFor=\"experimental-parsing\">\n          Experimental location parsing (EPI Gijón)\n        </label>\n      </div>\n      <div>\n        <input\n          type=\"checkbox\"\n          id=\"class-parsing\"\n          checked={classParse.classParsing}\n          onChange={classParsingHandler}\n        />\n        <label htmlFor=\"class-parsing\">Class type parsing</label>\n      </div>\n    </div>\n  );\n};\n\nexport default Checkboxes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}