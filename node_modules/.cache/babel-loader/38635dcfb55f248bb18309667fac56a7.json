{"ast":null,"code":"var _jsxFileName = \"/home/mier/git/epiCalendar/src/store/settings-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\"; // Default values for the context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DEFAULT_FILENAME = \"Calendario\";\nexport const DEFAULT_UNIVERSITY = \"epi\"; // Context for the settings of the app (better autocomplete)\n\nconst SettingsContext = /*#__PURE__*/createContext({\n  check: name => {},\n  university: \"\",\n  saveNameHandler: name => {},\n  saveas: \"\",\n  parse: true,\n  classParsing: true,\n  parseHandler: state => {},\n  classParsingHandler: state => {},\n  update: false,\n  updateHandler: state => {},\n  extension: \".ics\",\n  extensionHandler: extension => {}\n});\nexport const SettingsProvider = props => {\n  _s();\n\n  const [university, setUniversity] = useState(\"epi\"); // State for the university\n\n  const [saveas, setSaveas] = useState(\"Calendario\"); // State for the filename\n  // States for checkboxes\n\n  const [update, setUpdate] = useState(false);\n  const [isCheckedParsing, setIsCheckedParsing] = useState(true);\n  const [isClassParsing, setIsClassParsing] = useState(true); // State for the extension of the file\n\n  const [extension, setExtension] = useState(\".ics\"); // More general states which are used in the form to save the settings\n\n  const [oviedoCheck, setOviedoCheck] = useState({\n    parse: false,\n    classParsing: true,\n    parseDisabled: true,\n    classParsingDisabled: false\n  });\n  const [epiCheck, setEpiCheck] = useState({\n    parse: true,\n    classParsing: true,\n    parseDisabled: false,\n    classParsingDisabled: false\n  }); // useEffect hooks to update the states of the checkboxes\n\n  useEffect(() => {\n    if (university === \"epi\") {\n      setEpiCheck(existingValues => ({ ...existingValues,\n        parse: isCheckedParsing,\n        parseDisabled: false,\n        classParsingDisabled: false\n      }));\n    }\n\n    setUpdate(false);\n  }, [isCheckedParsing]);\n  useEffect(() => {\n    if (university === \"uo\") {\n      setOviedoCheck(previousState => ({ ...previousState,\n        classParsing: isClassParsing\n      }));\n    } else {\n      setEpiCheck(previousState => ({ ...previousState,\n        classParsing: isClassParsing\n      }));\n    }\n\n    setUpdate(false);\n  }, [isClassParsing]); // Function to set the university state\n\n  const checkHandler = name => {\n    setUniversity(name);\n  }; // Function to set the filename state\n\n\n  const saveNameHandler = name => {\n    setSaveas(name);\n  }; // Functions to set the checkboxes state\n\n\n  const parseHandler = state => {\n    setIsCheckedParsing(state);\n  };\n\n  const classParsingHandler = state => {\n    setIsClassParsing(state);\n  }; // Function to set the update state\n\n\n  const updateHandler = state => {\n    setUpdate(state);\n  }; // Function to set the extension state\n\n\n  const extensionHandler = extension => {\n    setExtension(extension);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      check: checkHandler,\n      university: university,\n      saveNameHandler: saveNameHandler,\n      saveas: saveas,\n      parseHandler: parseHandler,\n      classParsingHandler: classParsingHandler,\n      oviedoCheck: oviedoCheck,\n      epiCheck: epiCheck,\n      update: update,\n      updateHandler: updateHandler,\n      extension: extension,\n      extensionHandler: extensionHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsProvider, \"Yl6lKl1T64yzkHe/+z3vwqgIMS0=\");\n\n_c = SettingsProvider;\nexport default SettingsContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","DEFAULT_FILENAME","DEFAULT_UNIVERSITY","SettingsContext","check","name","university","saveNameHandler","saveas","parse","classParsing","parseHandler","state","classParsingHandler","update","updateHandler","extension","extensionHandler","SettingsProvider","props","setUniversity","setSaveas","setUpdate","isCheckedParsing","setIsCheckedParsing","isClassParsing","setIsClassParsing","setExtension","oviedoCheck","setOviedoCheck","parseDisabled","classParsingDisabled","epiCheck","setEpiCheck","existingValues","previousState","checkHandler","children"],"sources":["/home/mier/git/epiCalendar/src/store/settings-context.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\n// Default values for the context\nexport const DEFAULT_FILENAME = \"Calendario\";\nexport const DEFAULT_UNIVERSITY = \"epi\";\n\n// Context for the settings of the app (better autocomplete)\nconst SettingsContext = createContext({\n  check: (name) => {},\n  university: \"\",\n  saveNameHandler: (name) => {},\n  saveas: \"\",\n  parse: true,\n  classParsing: true,\n  parseHandler: (state) => {},\n  classParsingHandler: (state) => {},\n  update: false,\n  updateHandler: (state) => {},\n  extension: \".ics\",\n  extensionHandler: (extension) => {},\n});\n\nexport const SettingsProvider = (props) => {\n  const [university, setUniversity] = useState(\"epi\"); // State for the university\n  const [saveas, setSaveas] = useState(\"Calendario\"); // State for the filename\n\n  // States for checkboxes\n  const [update, setUpdate] = useState(false);\n  const [isCheckedParsing, setIsCheckedParsing] = useState(true);\n  const [isClassParsing, setIsClassParsing] = useState(true);\n\n  // State for the extension of the file\n  const [extension, setExtension] = useState(\".ics\");\n\n  // More general states which are used in the form to save the settings\n  const [oviedoCheck, setOviedoCheck] = useState({\n    parse: false,\n    classParsing: true,\n    parseDisabled: true,\n    classParsingDisabled: false,\n  });\n  const [epiCheck, setEpiCheck] = useState({\n    parse: true,\n    classParsing: true,\n    parseDisabled: false,\n    classParsingDisabled: false,\n  });\n\n  // useEffect hooks to update the states of the checkboxes\n  useEffect(() => {\n    if (university === \"epi\") {\n      setEpiCheck((existingValues) => ({\n        ...existingValues,\n        parse: isCheckedParsing,\n        parseDisabled: false,\n        classParsingDisabled: false,\n      }));\n    }\n    setUpdate(false);\n  }, [isCheckedParsing]);\n  useEffect(() => {\n    if (university === \"uo\") {\n      setOviedoCheck((previousState) => ({\n        ...previousState,\n        classParsing: isClassParsing,\n      }));\n    } else {\n      setEpiCheck((previousState) => ({\n        ...previousState,\n        classParsing: isClassParsing,\n      }));\n    }\n    setUpdate(false);\n  }, [isClassParsing]);\n\n  // Function to set the university state\n  const checkHandler = (name) => {\n    setUniversity(name);\n  };\n\n  // Function to set the filename state\n  const saveNameHandler = (name) => {\n    setSaveas(name);\n  };\n\n  // Functions to set the checkboxes state\n  const parseHandler = (state) => {\n    setIsCheckedParsing(state);\n  };\n  const classParsingHandler = (state) => {\n    setIsClassParsing(state);\n  };\n\n  // Function to set the update state\n  const updateHandler = (state) => {\n    setUpdate(state);\n  };\n\n  // Function to set the extension state\n  const extensionHandler = (extension) => {\n    setExtension(extension);\n  };\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        check: checkHandler,\n        university: university,\n        saveNameHandler: saveNameHandler,\n        saveas: saveas,\n        parseHandler: parseHandler,\n        classParsingHandler: classParsingHandler,\n        oviedoCheck: oviedoCheck,\n        epiCheck: epiCheck,\n        update: update,\n        updateHandler: updateHandler,\n        extension: extension,\n        extensionHandler: extensionHandler,\n      }}\n    >\n      {props.children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport default SettingsContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}