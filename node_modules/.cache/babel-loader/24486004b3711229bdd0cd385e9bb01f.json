{"ast":null,"code":"import _slicedToArray from\"/home/mier/git/epiCalendar/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{parse}from\"nth-check\";import React,{createContext,useEffect,useState}from\"react\";// Default values for the context\nimport{jsx as _jsx}from\"react/jsx-runtime\";export var DEFAULT_FILENAME=\"Calendario\";export var DEFAULT_UNIVERSITY=\"epi\";// Context for the settings of the app (better autocomplete)\nvar SettingsContext=/*#__PURE__*/createContext({saveNameHandler:function saveNameHandler(name){},saveas:\"\",parse:true,parseHandler:function parseHandler(state){},classParsing:true,classParsingHandler:function classParsingHandler(state){},update:false,updateHandler:function updateHandler(state){},extension:\".ics\",extensionHandler:function extensionHandler(extension){}});export var SettingsProvider=function SettingsProvider(props){var _useState=useState(\"Calendario\"),_useState2=_slicedToArray(_useState,2),saveas=_useState2[0],setSaveas=_useState2[1];// State for the filename\n// States for checkboxes\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),update=_useState4[0],setUpdate=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),isCheckedParsing=_useState6[0],setIsCheckedParsing=_useState6[1];var _useState7=useState(true),_useState8=_slicedToArray(_useState7,2),isClassParsing=_useState8[0],setIsClassParsing=_useState8[1];// State for the extension of the file\nvar _useState9=useState(\".ics\"),_useState10=_slicedToArray(_useState9,2),extension=_useState10[0],setExtension=_useState10[1];// More general states which are used in the form to save the settings\n// const [oviedoCheck, setOviedoCheck] = useState({\n//   parse: false,\n//   classParsing: true,\n//   parseDisabled: true,\n//   classParsingDisabled: false,\n// });\n// const [epiCheck, setEpiCheck] = useState({\n//   parse: true,\n//   classParsing: true,\n//   parseDisabled: false,\n//   classParsingDisabled: false,\n// });\n// useEffect hooks to update the states of the checkboxes\n// useEffect(() => {\n//   if (university === \"epi\") {\n//     setEpiCheck((existingValues) => ({\n//       ...existingValues,\n//       parse: isCheckedParsing,\n//       parseDisabled: false,\n//       classParsingDisabled: false,\n//     }));\n//   }\n//   setUpdate(false);\n// }, [isCheckedParsing]);\n// useEffect(() => {\n//   if (university === \"uo\") {\n//     setOviedoCheck((previousState) => ({\n//       ...previousState,\n//       classParsing: isClassParsing,\n//     }));\n//   } else {\n//     setEpiCheck((previousState) => ({\n//       ...previousState,\n//       classParsing: isClassParsing,\n//     }));\n//   }\n//   setUpdate(false);\n// }, [isClassParsing]);\n// Function to set the filename state\nvar saveNameHandler=function saveNameHandler(name){setSaveas(name);};// Functions to set the checkboxes state\nvar parseHandler=function parseHandler(state){setIsCheckedParsing(state);};var classParsingHandler=function classParsingHandler(state){setIsClassParsing(state);};// Function to set the update state\nvar updateHandler=function updateHandler(state){setUpdate(state);};// Function to set the extension state\nvar extensionHandler=function extensionHandler(extension){setExtension(extension);};return/*#__PURE__*/_jsx(SettingsContext.Provider,{value:{// check: checkHandler,\nsaveNameHandler:saveNameHandler,saveas:saveas,parseHandler:parseHandler,parse:isCheckedParsing,classParsing:isClassParsing,classParsingHandler:classParsingHandler,update:update,updateHandler:updateHandler,extension:extension,extensionHandler:extensionHandler},children:props.children});};export default SettingsContext;","map":{"version":3,"names":["parse","React","createContext","useEffect","useState","DEFAULT_FILENAME","DEFAULT_UNIVERSITY","SettingsContext","saveNameHandler","name","saveas","parseHandler","state","classParsing","classParsingHandler","update","updateHandler","extension","extensionHandler","SettingsProvider","props","setSaveas","setUpdate","isCheckedParsing","setIsCheckedParsing","isClassParsing","setIsClassParsing","setExtension","children"],"sources":["/home/mier/git/epiCalendar/src/store/settings-context.js"],"sourcesContent":["import { parse } from \"nth-check\";\nimport React, { createContext, useEffect, useState } from \"react\";\n\n// Default values for the context\nexport const DEFAULT_FILENAME = \"Calendario\";\nexport const DEFAULT_UNIVERSITY = \"epi\";\n\n// Context for the settings of the app (better autocomplete)\nconst SettingsContext = createContext({\n  \n  saveNameHandler: (name) => {},\n  saveas: \"\",\n  parse: true,\n  parseHandler: (state) => {},\n  classParsing: true,\n  classParsingHandler: (state) => {},\n  update: false,\n  updateHandler: (state) => {},\n  extension: \".ics\",\n  extensionHandler: (extension) => {},\n});\n\nexport const SettingsProvider = (props) => {\n  const [saveas, setSaveas] = useState(\"Calendario\"); // State for the filename\n\n  // States for checkboxes\n  const [update, setUpdate] = useState(false);\n  const [isCheckedParsing, setIsCheckedParsing] = useState(true);\n  const [isClassParsing, setIsClassParsing] = useState(true);\n\n  // State for the extension of the file\n  const [extension, setExtension] = useState(\".ics\");\n\n  // More general states which are used in the form to save the settings\n  // const [oviedoCheck, setOviedoCheck] = useState({\n  //   parse: false,\n  //   classParsing: true,\n  //   parseDisabled: true,\n  //   classParsingDisabled: false,\n  // });\n  // const [epiCheck, setEpiCheck] = useState({\n  //   parse: true,\n  //   classParsing: true,\n  //   parseDisabled: false,\n  //   classParsingDisabled: false,\n  // });\n\n  // useEffect hooks to update the states of the checkboxes\n  // useEffect(() => {\n  //   if (university === \"epi\") {\n  //     setEpiCheck((existingValues) => ({\n  //       ...existingValues,\n  //       parse: isCheckedParsing,\n  //       parseDisabled: false,\n  //       classParsingDisabled: false,\n  //     }));\n  //   }\n  //   setUpdate(false);\n  // }, [isCheckedParsing]);\n  // useEffect(() => {\n  //   if (university === \"uo\") {\n  //     setOviedoCheck((previousState) => ({\n  //       ...previousState,\n  //       classParsing: isClassParsing,\n  //     }));\n  //   } else {\n  //     setEpiCheck((previousState) => ({\n  //       ...previousState,\n  //       classParsing: isClassParsing,\n  //     }));\n  //   }\n  //   setUpdate(false);\n  // }, [isClassParsing]);\n\n  // Function to set the filename state\n  const saveNameHandler = (name) => {\n    setSaveas(name);\n  };\n\n  // Functions to set the checkboxes state\n  const parseHandler = (state) => {\n    setIsCheckedParsing(state);\n  };\n  const classParsingHandler = (state) => {\n    setIsClassParsing(state);\n  };\n\n  // Function to set the update state\n  const updateHandler = (state) => {\n    setUpdate(state);\n  };\n\n  // Function to set the extension state\n  const extensionHandler = (extension) => {\n    setExtension(extension);\n  };\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        // check: checkHandler,\n        saveNameHandler: saveNameHandler,\n        saveas: saveas,\n        parseHandler: parseHandler,\n        parse: isCheckedParsing,\n        classParsing: isClassParsing,\n        classParsingHandler: classParsingHandler,\n        update: update,\n        updateHandler: updateHandler,\n        extension: extension,\n        extensionHandler: extensionHandler,\n      }}\n    >\n      {props.children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport default SettingsContext;\n"],"mappings":"gHAAA,OAASA,KAAT,KAAsB,WAAtB,CACA,MAAOC,MAAP,EAAgBC,aAAhB,CAA+BC,SAA/B,CAA0CC,QAA1C,KAA0D,OAA1D,CAEA;2CACA,MAAO,IAAMC,iBAAgB,CAAG,YAAzB,CACP,MAAO,IAAMC,mBAAkB,CAAG,KAA3B,CAEP;AACA,GAAMC,gBAAe,cAAGL,aAAa,CAAC,CAEpCM,eAAe,CAAE,yBAACC,IAAD,CAAU,CAAE,CAFO,CAGpCC,MAAM,CAAE,EAH4B,CAIpCV,KAAK,CAAE,IAJ6B,CAKpCW,YAAY,CAAE,sBAACC,KAAD,CAAW,CAAE,CALS,CAMpCC,YAAY,CAAE,IANsB,CAOpCC,mBAAmB,CAAE,6BAACF,KAAD,CAAW,CAAE,CAPE,CAQpCG,MAAM,CAAE,KAR4B,CASpCC,aAAa,CAAE,uBAACJ,KAAD,CAAW,CAAE,CATQ,CAUpCK,SAAS,CAAE,MAVyB,CAWpCC,gBAAgB,CAAE,0BAACD,SAAD,CAAe,CAAE,CAXC,CAAD,CAArC,CAcA,MAAO,IAAME,iBAAgB,CAAG,QAAnBA,iBAAmB,CAACC,KAAD,CAAW,CACzC,cAA4BhB,QAAQ,CAAC,YAAD,CAApC,wCAAOM,MAAP,eAAeW,SAAf,eAAoD;AAEpD;AACA,eAA4BjB,QAAQ,CAAC,KAAD,CAApC,yCAAOW,MAAP,eAAeO,SAAf,eACA,eAAgDlB,QAAQ,CAAC,IAAD,CAAxD,yCAAOmB,gBAAP,eAAyBC,mBAAzB,eACA,eAA4CpB,QAAQ,CAAC,IAAD,CAApD,yCAAOqB,cAAP,eAAuBC,iBAAvB,eAEA;AACA,eAAkCtB,QAAQ,CAAC,MAAD,CAA1C,0CAAOa,SAAP,gBAAkBU,YAAlB,gBAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,GAAMnB,gBAAe,CAAG,QAAlBA,gBAAkB,CAACC,IAAD,CAAU,CAChCY,SAAS,CAACZ,IAAD,CAAT,CACD,CAFD,CAIA;AACA,GAAME,aAAY,CAAG,QAAfA,aAAe,CAACC,KAAD,CAAW,CAC9BY,mBAAmB,CAACZ,KAAD,CAAnB,CACD,CAFD,CAGA,GAAME,oBAAmB,CAAG,QAAtBA,oBAAsB,CAACF,KAAD,CAAW,CACrCc,iBAAiB,CAACd,KAAD,CAAjB,CACD,CAFD,CAIA;AACA,GAAMI,cAAa,CAAG,QAAhBA,cAAgB,CAACJ,KAAD,CAAW,CAC/BU,SAAS,CAACV,KAAD,CAAT,CACD,CAFD,CAIA;AACA,GAAMM,iBAAgB,CAAG,QAAnBA,iBAAmB,CAACD,SAAD,CAAe,CACtCU,YAAY,CAACV,SAAD,CAAZ,CACD,CAFD,CAIA,mBACE,KAAC,eAAD,CAAiB,QAAjB,EACE,KAAK,CAAE,CACL;AACAT,eAAe,CAAEA,eAFZ,CAGLE,MAAM,CAAEA,MAHH,CAILC,YAAY,CAAEA,YAJT,CAKLX,KAAK,CAAEuB,gBALF,CAMLV,YAAY,CAAEY,cANT,CAOLX,mBAAmB,CAAEA,mBAPhB,CAQLC,MAAM,CAAEA,MARH,CASLC,aAAa,CAAEA,aATV,CAULC,SAAS,CAAEA,SAVN,CAWLC,gBAAgB,CAAEA,gBAXb,CADT,UAeGE,KAAK,CAACQ,QAfT,EADF,CAmBD,CA9FM,CAgGP,cAAerB,gBAAf"},"metadata":{},"sourceType":"module"}