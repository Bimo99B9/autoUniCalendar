{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compile = exports.parse = void 0;\n\nvar parse_1 = require(\"./parse\");\n\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function get() {\n    return parse_1.parse;\n  }\n});\n\nvar compile_1 = require(\"./compile\");\n\nObject.defineProperty(exports, \"compile\", {\n  enumerable: true,\n  get: function get() {\n    return compile_1.compile;\n  }\n});\n/**\n * Parses and compiles a formula to a highly optimized function.\n * Combination of `parse` and `compile`.\n *\n * If the formula doesn't match any elements,\n * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.\n * Otherwise, a function accepting an _index_ is returned, which returns\n * whether or not the passed _index_ matches the formula.\n *\n * Note: The nth-rule starts counting at `1`, the returned function at `0`.\n *\n * @param formula The formula to compile.\n * @example\n * const check = nthCheck(\"2n+3\");\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n */\n\nfunction nthCheck(formula) {\n  return (0, compile_1.compile)((0, parse_1.parse)(formula));\n}\n\nexports.default = nthCheck;","map":{"version":3,"names":["Object","defineProperty","exports","value","compile","parse","parse_1","require","enumerable","get","compile_1","nthCheck","formula","default"],"sources":["/home/mier/git/epiCalendar/node_modules/nth-check/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compile = exports.parse = void 0;\nvar parse_1 = require(\"./parse\");\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return parse_1.parse; } });\nvar compile_1 = require(\"./compile\");\nObject.defineProperty(exports, \"compile\", { enumerable: true, get: function () { return compile_1.compile; } });\n/**\n * Parses and compiles a formula to a highly optimized function.\n * Combination of `parse` and `compile`.\n *\n * If the formula doesn't match any elements,\n * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.\n * Otherwise, a function accepting an _index_ is returned, which returns\n * whether or not the passed _index_ matches the formula.\n *\n * Note: The nth-rule starts counting at `1`, the returned function at `0`.\n *\n * @param formula The formula to compile.\n * @example\n * const check = nthCheck(\"2n+3\");\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n */\nfunction nthCheck(formula) {\n    return (0, compile_1.compile)((0, parse_1.parse)(formula));\n}\nexports.default = nthCheck;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,KAAR,GAAgB,KAAK,CAAvC;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACAP,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,OAA/B,EAAwC;EAAEM,UAAU,EAAE,IAAd;EAAoBC,GAAG,EAAE,eAAY;IAAE,OAAOH,OAAO,CAACD,KAAf;EAAuB;AAA9D,CAAxC;;AACA,IAAIK,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAvB;;AACAP,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,SAA/B,EAA0C;EAAEM,UAAU,EAAE,IAAd;EAAoBC,GAAG,EAAE,eAAY;IAAE,OAAOC,SAAS,CAACN,OAAjB;EAA2B;AAAlE,CAA1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASO,QAAT,CAAkBC,OAAlB,EAA2B;EACvB,OAAO,CAAC,GAAGF,SAAS,CAACN,OAAd,EAAuB,CAAC,GAAGE,OAAO,CAACD,KAAZ,EAAmBO,OAAnB,CAAvB,CAAP;AACH;;AACDV,OAAO,CAACW,OAAR,GAAkBF,QAAlB"},"metadata":{},"sourceType":"script"}