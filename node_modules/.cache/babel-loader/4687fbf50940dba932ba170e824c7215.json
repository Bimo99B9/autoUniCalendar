{"ast":null,"code":"var _jsxFileName = \"/home/mier/git/epiCalendar/src/components/Settings/Checkboxes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport classes from \"./Checkboxes.module.css\";\nimport SettingsContext from \"../../store/settings-context\"; // Component that represents the 3 checkboxes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkboxes = () => {\n  _s();\n\n  // Access the settings context\n  const ctx = useContext(SettingsContext); // State for the checkboxes\n\n  const [parse, setParse] = useState({\n    parse: true,\n    parseDisabled: false\n  });\n  const [classParse, setClassParse] = useState({\n    classParsing: true,\n    classParsingDisabled: false\n  }); // No dependecies as we want the checkboxes to be updated only on first render\n\n  useEffect(() => {\n    if (ctx.university === \"uo\") {\n      setParse({\n        parse: ctx.oviedoCheck.parse,\n        parseDisabled: ctx.oviedoCheck.parseDisabled\n      });\n      setClassParse({\n        classParsing: ctx.oviedoCheck.classParsing,\n        classParsingDisabled: ctx.oviedoCheck.classParsingDisabled\n      });\n    } else if (ctx.university === \"epi\") {\n      setParse({\n        parse: ctx.epiCheck.parse,\n        parseDisabled: ctx.epiCheck.parseDisabled\n      });\n      setClassParse({\n        classParsing: ctx.epiCheck.classParsing,\n        classParsingDisabled: ctx.epiCheck.classParsingDisabled\n      });\n    }\n  }, [ctx.university, ctx.update]); // Effect for updating the checkboxes\n\n  useEffect(() => {\n    ctx.parseHandler(parse.parse);\n    ctx.classParsingHandler(classParse.classParsing);\n  }, [parse.parse, classParse.classParsing]); // Function that handles the checkbox change (parse or location)\n\n  const parseHandler = () => {\n    setParse(previousState => ({ ...previousState,\n      parse: !previousState.parse\n    }));\n    ctx.updateHandler(true);\n  }; // Function that handles the checkbox change (class-type or class-type)\n\n\n  const classParsingHandler = () => {\n    setClassParse(previousState => ({ ...previousState,\n      classParsing: !previousState.classParsing\n    }));\n    ctx.updateHandler(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.overall,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"location-parsing\",\n        checked: parse.parse,\n        onChange: parseHandler,\n        disabled: parse.parseDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"location-parsing\",\n        children: \"Location parsing (EPI Gij\\xF3n)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"class-parsing\",\n        checked: classParse.classParsing,\n        onChange: classParsingHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"class-parsing\",\n        children: \"Class type parsing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkboxes, \"l1ZbWdZhL8gciltfElk6GuOs894=\");\n\n_c = Checkboxes;\nexport default Checkboxes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkboxes\");","map":{"version":3,"names":["React","useState","useEffect","useContext","classes","SettingsContext","Checkboxes","ctx","parse","setParse","parseDisabled","classParse","setClassParse","classParsing","classParsingDisabled","university","oviedoCheck","epiCheck","update","parseHandler","classParsingHandler","previousState","updateHandler","overall"],"sources":["/home/mier/git/epiCalendar/src/components/Settings/Checkboxes.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\n\nimport classes from \"./Checkboxes.module.css\";\nimport SettingsContext from \"../../store/settings-context\";\n\n// Component that represents the 3 checkboxes\nconst Checkboxes = () => {\n  // Access the settings context\n  const ctx = useContext(SettingsContext);\n\n  // State for the checkboxes\n  const [parse, setParse] = useState({ parse: true, parseDisabled: false });\n  const [classParse, setClassParse] = useState({\n    classParsing: true,\n    classParsingDisabled: false,\n  });\n\n  // No dependecies as we want the checkboxes to be updated only on first render\n  useEffect(() => {\n    if (ctx.university === \"uo\") {\n      setParse({\n        parse: ctx.oviedoCheck.parse,\n        parseDisabled: ctx.oviedoCheck.parseDisabled,\n      });\n      setClassParse({\n        classParsing: ctx.oviedoCheck.classParsing,\n        classParsingDisabled: ctx.oviedoCheck.classParsingDisabled,\n      });\n    } else if (ctx.university === \"epi\") {\n      setParse({\n        parse: ctx.epiCheck.parse,\n        parseDisabled: ctx.epiCheck.parseDisabled,\n      });\n      setClassParse({\n        classParsing: ctx.epiCheck.classParsing,\n        classParsingDisabled: ctx.epiCheck.classParsingDisabled,\n      });\n    }\n  }, [ctx.university, ctx.update]);\n\n  // Effect for updating the checkboxes\n  useEffect(() => {\n    ctx.parseHandler(parse.parse);\n    ctx.classParsingHandler(classParse.classParsing);\n  }, [parse.parse, classParse.classParsing]);\n\n  // Function that handles the checkbox change (parse or location)\n  const parseHandler = () => {\n    setParse((previousState) => ({\n      ...previousState,\n      parse: !previousState.parse,\n    }));\n    ctx.updateHandler(true);\n  };\n\n  // Function that handles the checkbox change (class-type or class-type)\n  const classParsingHandler = () => {\n    setClassParse((previousState) => ({\n      ...previousState,\n      classParsing: !previousState.classParsing,\n    }));\n    ctx.updateHandler(true);\n  };\n\n  return (\n    <div className={classes.overall}>\n      <div>\n        <input\n          type=\"checkbox\"\n          id=\"location-parsing\"\n          checked={parse.parse}\n          onChange={parseHandler}\n          disabled={parse.parseDisabled}\n        />\n        <label htmlFor=\"location-parsing\">Location parsing (EPI Gij√≥n)</label>\n      </div>\n      <div>\n        <input\n          type=\"checkbox\"\n          id=\"class-parsing\"\n          checked={classParse.classParsing}\n          onChange={classParsingHandler}\n        />\n        <label htmlFor=\"class-parsing\">Class type parsing</label>\n      </div>\n    </div>\n  );\n};\n\nexport default Checkboxes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}