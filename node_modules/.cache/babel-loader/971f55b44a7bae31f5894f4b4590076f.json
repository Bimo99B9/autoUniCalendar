{"ast":null,"code":"import _slicedToArray from\"/home/mier/git/epiCalendar/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";// Custom hook to use the input\nvar useInput=function useInput(validateValue){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),enteredValue=_useState2[0],setEnteredValue=_useState2[1];// State for the entered input value\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isTouched=_useState4[0],setIsTouched=_useState4[1];// State to check if the input has been touched\nvar valueIsValid=validateValue(enteredValue);// Check if the input value is valid through the validateValue function\nvar hasError=!valueIsValid&&isTouched;// Check if the input has an error (if it is not valid and it has been touched)\n// Function to update the enteredValue of the input\nvar valueChangeHandler=function valueChangeHandler(event){setEnteredValue(event.target.value);};// Function to update the isTouched state of the input\nvar inputBlurHandler=function inputBlurHandler(){if(enteredValue.trim().length===0){setIsTouched(false);}else{setIsTouched(true);}};// Reset for the enteredValue and isTouched state\nvar reset=function reset(){setEnteredValue(\"\");setIsTouched(false);};return{value:enteredValue,isValid:valueIsValid,hasError:hasError,valueChangeHandler:valueChangeHandler,inputBlurHandler:inputBlurHandler,reset:reset};};export default useInput;","map":{"version":3,"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","trim","length","reset","isValid"],"sources":["/home/mier/git/epiCalendar/src/hooks/use-input.js"],"sourcesContent":["import { useState } from \"react\";\n\n// Custom hook to use the input\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState(\"\"); // State for the entered input value\n  const [isTouched, setIsTouched] = useState(false); // State to check if the input has been touched\n\n  const valueIsValid = validateValue(enteredValue); // Check if the input value is valid through the validateValue function\n  const hasError = !valueIsValid && isTouched; // Check if the input has an error (if it is not valid and it has been touched)\n\n  // Function to update the enteredValue of the input\n  const valueChangeHandler = (event) => {\n    setEnteredValue(event.target.value);\n  };\n\n  // Function to update the isTouched state of the input\n  const inputBlurHandler = () => {\n    if (enteredValue.trim().length === 0) {\n      setIsTouched(false);\n    } else {\n      setIsTouched(true);\n    }\n  };\n\n  // Reset for the enteredValue and isTouched state\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useInput;\n"],"mappings":"gHAAA,OAASA,QAAT,KAAyB,OAAzB,CAEA;AACA,GAAMC,SAAQ,CAAG,QAAXA,SAAW,CAACC,aAAD,CAAmB,CAClC,cAAwCF,QAAQ,CAAC,EAAD,CAAhD,wCAAOG,YAAP,eAAqBC,eAArB,eAAsD;AACtD,eAAkCJ,QAAQ,CAAC,KAAD,CAA1C,yCAAOK,SAAP,eAAkBC,YAAlB,eAAmD;AAEnD,GAAMC,aAAY,CAAGL,aAAa,CAACC,YAAD,CAAlC,CAAkD;AAClD,GAAMK,SAAQ,CAAG,CAACD,YAAD,EAAiBF,SAAlC,CAA6C;AAE7C;AACA,GAAMI,mBAAkB,CAAG,QAArBA,mBAAqB,CAACC,KAAD,CAAW,CACpCN,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CACD,CAFD,CAIA;AACA,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAmB,EAAM,CAC7B,GAAIV,YAAY,CAACW,IAAb,GAAoBC,MAApB,GAA+B,CAAnC,CAAsC,CACpCT,YAAY,CAAC,KAAD,CAAZ,CACD,CAFD,IAEO,CACLA,YAAY,CAAC,IAAD,CAAZ,CACD,CACF,CAND,CAQA;AACA,GAAMU,MAAK,CAAG,QAARA,MAAQ,EAAM,CAClBZ,eAAe,CAAC,EAAD,CAAf,CACAE,YAAY,CAAC,KAAD,CAAZ,CACD,CAHD,CAKA,MAAO,CACLM,KAAK,CAAET,YADF,CAELc,OAAO,CAAEV,YAFJ,CAGLC,QAAQ,CAARA,QAHK,CAILC,kBAAkB,CAAlBA,kBAJK,CAKLI,gBAAgB,CAAhBA,gBALK,CAMLG,KAAK,CAALA,KANK,CAAP,CAQD,CAnCD,CAqCA,cAAef,SAAf"},"metadata":{},"sourceType":"module"}