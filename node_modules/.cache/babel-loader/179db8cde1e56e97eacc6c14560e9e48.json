{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // Custom hook to use the input\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\"); // State for the entered input value\n\n  const [isTouched, setIsTouched] = useState(false); // State to check if the input has been touched\n\n  const valueIsValid = validateValue(enteredValue); // Check if the input value is valid through the validateValue function\n\n  const hasError = !valueIsValid && isTouched; // Check if the input has an error (if it is not valid and it has been touched)\n  // Function to update the enteredValue of the input\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  }; // Function to update the isTouched state of the input\n\n\n  const inputBlurHandler = () => {\n    if (enteredValue.trim().length === 0) {\n      setIsTouched(false);\n    } else {\n      setIsTouched(true);\n    }\n  }; // Reset for the enteredValue and isTouched state\n\n\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"qlnmfbTzj9Q0H+uTzI/AGYgwaf8=\");\n\nexport default useInput;","map":{"version":3,"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","trim","length","reset","isValid"],"sources":["/home/mier/git/epiCalendar/src/hooks/use-input.js"],"sourcesContent":["import { useState } from \"react\";\n\n// Custom hook to use the input\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState(\"\"); // State for the entered input value\n  const [isTouched, setIsTouched] = useState(false); // State to check if the input has been touched\n\n  const valueIsValid = validateValue(enteredValue); // Check if the input value is valid through the validateValue function\n  const hasError = !valueIsValid && isTouched; // Check if the input has an error (if it is not valid and it has been touched)\n\n  // Function to update the enteredValue of the input\n  const valueChangeHandler = (event) => {\n    setEnteredValue(event.target.value);\n  };\n\n  // Function to update the isTouched state of the input\n  const inputBlurHandler = () => {\n    if (enteredValue.trim().length === 0) {\n      setIsTouched(false);\n    } else {\n      setIsTouched(true);\n    }\n  };\n\n  // Reset for the enteredValue and isTouched state\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useInput;\n"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;AACA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;EAAA;;EAClC,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD,CADkC,CACoB;;EACtD,MAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C,CAFkC,CAEiB;;EAEnD,MAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC,CAJkC,CAIgB;;EAClD,MAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC,CALkC,CAKW;EAE7C;;EACA,MAAMI,kBAAkB,GAAIC,KAAD,IAAW;IACpCN,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;EACD,CAFD,CARkC,CAYlC;;;EACA,MAAMC,gBAAgB,GAAG,MAAM;IAC7B,IAAIV,YAAY,CAACW,IAAb,GAAoBC,MAApB,KAA+B,CAAnC,EAAsC;MACpCT,YAAY,CAAC,KAAD,CAAZ;IACD,CAFD,MAEO;MACLA,YAAY,CAAC,IAAD,CAAZ;IACD;EACF,CAND,CAbkC,CAqBlC;;;EACA,MAAMU,KAAK,GAAG,MAAM;IAClBZ,eAAe,CAAC,EAAD,CAAf;IACAE,YAAY,CAAC,KAAD,CAAZ;EACD,CAHD;;EAKA,OAAO;IACLM,KAAK,EAAET,YADF;IAELc,OAAO,EAAEV,YAFJ;IAGLC,QAHK;IAILC,kBAJK;IAKLI,gBALK;IAMLG;EANK,CAAP;AAQD,CAnCD;;GAAMf,Q;;AAqCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}