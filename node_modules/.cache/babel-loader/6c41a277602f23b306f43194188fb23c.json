{"ast":null,"code":"var _jsxFileName = \"/home/mier/git/epiCalendar/src/store/settings-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\"; // Default values for the context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DEFAULT_FILENAME = \"Calendario\";\nexport const DEFAULT_UNIVERSITY = \"epi\"; // Context for the settings of the app (better autocomplete)\n\nconst SettingsContext = /*#__PURE__*/createContext({\n  check: name => {},\n  university: \"\",\n  saveNameHandler: name => {},\n  saveas: \"\",\n  parse: true,\n  experimental: true,\n  classParsing: true,\n  parseHandler: state => {},\n  experimentalHandler: state => {},\n  classParsingHandler: state => {},\n  update: false,\n  updateHandler: state => {}\n});\nexport const SettingsProvider = props => {\n  _s();\n\n  const [university, setUniversity] = useState(\"epi\"); // State for the university\n\n  const [saveas, setSaveas] = useState(\"Calendario\"); // State for the filename\n  // States for checkboxes\n\n  const [update, setUpdate] = useState(false);\n  const [isCheckedParsing, setIsCheckedParsing] = useState(true);\n  const [isCheckedExperimental, setIsCheckedExperimental] = useState(true);\n  const [isClassParsing, setIsClassParsing] = useState(true); // More general states which are used in the form to save the settings\n\n  const [oviedoCheck, setOviedoCheck] = useState({\n    parse: false,\n    experimental: false,\n    classParsing: true,\n    parseDisabled: true,\n    experimentalDisabled: true,\n    classParsingDisabled: false\n  });\n  const [epiCheck, setEpiCheck] = useState({\n    parse: true,\n    experimental: true,\n    classParsing: true,\n    parseDisabled: false,\n    experimentalDisabled: false,\n    classParsingDisabled: false\n  }); // useEffect hooks to update the states of the checkboxes\n\n  useEffect(() => {\n    if (university === \"epi\") {\n      setEpiCheck(existingValues => ({ ...existingValues,\n        parse: isCheckedParsing,\n        parseDisabled: false,\n        experimental: isCheckedParsing === true ? true : false,\n        experimentalDisabled: isCheckedParsing === true ? false : true,\n        classParsingDisabled: false\n      }));\n    }\n\n    setUpdate(false);\n  }, [isCheckedParsing]);\n  useEffect(() => {\n    if (university === \"epi\") {\n      setEpiCheck(previousState => ({ ...previousState,\n        experimental: isCheckedParsing === true ? isCheckedExperimental : false\n      }));\n    }\n\n    setUpdate(false);\n  }, [isCheckedExperimental]);\n  useEffect(() => {\n    if (university === \"uo\") {\n      setOviedoCheck(previousState => ({ ...previousState,\n        classParsing: isClassParsing\n      }));\n    } else {\n      setEpiCheck(previousState => ({ ...previousState,\n        classParsing: isClassParsing\n      }));\n    }\n\n    setUpdate(false);\n  }, [isClassParsing]); // Function to set the university state\n\n  const checkHandler = name => {\n    setUniversity(name);\n  }; // Function to set the filename state\n\n\n  const saveNameHandler = name => {\n    setSaveas(name);\n  }; // Functions to set the checkboxes state\n\n\n  const parseHandler = state => {\n    setIsCheckedParsing(state);\n  };\n\n  const experimentalHandler = state => {\n    setIsCheckedExperimental(state);\n  };\n\n  const classParsingHandler = state => {\n    setIsClassParsing(state);\n  }; // Function to set the update state\n\n\n  const updateHandler = state => {\n    setUpdate(state);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      check: checkHandler,\n      university: university,\n      saveNameHandler: saveNameHandler,\n      saveas: saveas,\n      parseHandler: parseHandler,\n      experimentalHandler: experimentalHandler,\n      classParsingHandler: classParsingHandler,\n      oviedoCheck: oviedoCheck,\n      epiCheck: epiCheck,\n      update: update,\n      updateHandler: updateHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsProvider, \"Rj0fWRf0rOAahE/wK60PC142AKs=\");\n\n_c = SettingsProvider;\nexport default SettingsContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","DEFAULT_FILENAME","DEFAULT_UNIVERSITY","SettingsContext","check","name","university","saveNameHandler","saveas","parse","experimental","classParsing","parseHandler","state","experimentalHandler","classParsingHandler","update","updateHandler","SettingsProvider","props","setUniversity","setSaveas","setUpdate","isCheckedParsing","setIsCheckedParsing","isCheckedExperimental","setIsCheckedExperimental","isClassParsing","setIsClassParsing","oviedoCheck","setOviedoCheck","parseDisabled","experimentalDisabled","classParsingDisabled","epiCheck","setEpiCheck","existingValues","previousState","checkHandler","children"],"sources":["/home/mier/git/epiCalendar/src/store/settings-context.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\n// Default values for the context\nexport const DEFAULT_FILENAME = \"Calendario\";\nexport const DEFAULT_UNIVERSITY = \"epi\";\n\n// Context for the settings of the app (better autocomplete)\nconst SettingsContext = createContext({\n  check: (name) => {},\n  university: \"\",\n  saveNameHandler: (name) => {},\n  saveas: \"\",\n  parse: true,\n  experimental: true,\n  classParsing: true,\n  parseHandler: (state) => {},\n  experimentalHandler: (state) => {},\n  classParsingHandler: (state) => {},\n  update: false,\n  updateHandler: (state) => {},\n});\n\nexport const SettingsProvider = (props) => {\n  const [university, setUniversity] = useState(\"epi\"); // State for the university\n  const [saveas, setSaveas] = useState(\"Calendario\"); // State for the filename\n\n  // States for checkboxes\n  const [update, setUpdate] = useState(false);\n  const [isCheckedParsing, setIsCheckedParsing] = useState(true);\n  const [isCheckedExperimental, setIsCheckedExperimental] = useState(true);\n  const [isClassParsing, setIsClassParsing] = useState(true);\n\n  // More general states which are used in the form to save the settings\n  const [oviedoCheck, setOviedoCheck] = useState({\n    parse: false,\n    experimental: false,\n    classParsing: true,\n    parseDisabled: true,\n    experimentalDisabled: true,\n    classParsingDisabled: false,\n  });\n  const [epiCheck, setEpiCheck] = useState({\n    parse: true,\n    experimental: true,\n    classParsing: true,\n    parseDisabled: false,\n    experimentalDisabled: false,\n    classParsingDisabled: false,\n  });\n\n  // useEffect hooks to update the states of the checkboxes\n  useEffect(() => {\n    if (university === \"epi\") {\n      setEpiCheck((existingValues) => ({\n        ...existingValues,\n        parse: isCheckedParsing,\n        parseDisabled: false,\n        experimental: isCheckedParsing === true ? true : false,\n        experimentalDisabled: isCheckedParsing === true ? false : true,\n        classParsingDisabled: false,\n      }));\n    }\n    setUpdate(false);\n  }, [isCheckedParsing]);\n  useEffect(() => {\n    if (university === \"epi\") {\n      setEpiCheck((previousState) => ({\n        ...previousState,\n        experimental: isCheckedParsing === true ? isCheckedExperimental : false,\n      }));\n    }\n    setUpdate(false);\n  }, [isCheckedExperimental]);\n  useEffect(() => {\n    if (university === \"uo\") {\n      setOviedoCheck((previousState) => ({\n        ...previousState,\n        classParsing: isClassParsing,\n      }));\n    } else {\n      setEpiCheck((previousState) => ({\n        ...previousState,\n        classParsing: isClassParsing,\n      }));\n    }\n    setUpdate(false);\n  }, [isClassParsing]);\n\n  // Function to set the university state\n  const checkHandler = (name) => {\n    setUniversity(name);\n  };\n\n  // Function to set the filename state\n  const saveNameHandler = (name) => {\n    setSaveas(name);\n  };\n\n  // Functions to set the checkboxes state\n  const parseHandler = (state) => {\n    setIsCheckedParsing(state);\n  };\n  const experimentalHandler = (state) => {\n    setIsCheckedExperimental(state);\n  };\n  const classParsingHandler = (state) => {\n    setIsClassParsing(state);\n  };\n\n  // Function to set the update state\n  const updateHandler = (state) => {\n    setUpdate(state);\n  };\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        check: checkHandler,\n        university: university,\n        saveNameHandler: saveNameHandler,\n        saveas: saveas,\n        parseHandler: parseHandler,\n        experimentalHandler: experimentalHandler,\n        classParsingHandler: classParsingHandler,\n        oviedoCheck: oviedoCheck,\n        epiCheck: epiCheck,\n        update: update,\n        updateHandler: updateHandler,\n      }}\n    >\n      {props.children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport default SettingsContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}