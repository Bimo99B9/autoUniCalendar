/* This loader renders the template with underscore if no other loader was found */
// @ts-nocheck
'use strict';
const _ = require('lodash');
<<<<<<< HEAD

module.exports = function (source) {
  // Get templating options
  const options = this.getOptions();
  const force = options.force || false;

  const allLoadersButThisOne = this.loaders.filter((loader) => loader.normal !== module.exports);

=======
const loaderUtils = require('loader-utils');

module.exports = function (source) {
  // Get templating options
  const options = this.query !== '' ? loaderUtils.getOptions(this) : {};
  const force = options.force || false;

  const allLoadersButThisOne = this.loaders.filter(function (loader) {
    return loader.normal !== module.exports;
  });
>>>>>>> 2cfd330b (move react to root dir)
  // This loader shouldn't kick in if there is any other loader (unless it's explicitly enforced)
  if (allLoadersButThisOne.length > 0 && !force) {
    return source;
  }
<<<<<<< HEAD

  // Allow only one html-webpack-plugin loader to allow loader options in the webpack config
  const htmlWebpackPluginLoaders = this.loaders.filter((loader) => loader.normal === module.exports);
  const lastHtmlWebpackPluginLoader = htmlWebpackPluginLoaders[htmlWebpackPluginLoaders.length - 1];
  if (this.loaders[this.loaderIndex] !== lastHtmlWebpackPluginLoader) {
    return source;
  }

=======
>>>>>>> 2cfd330b (move react to root dir)
  // Skip .js files (unless it's explicitly enforced)
  if (/\.js$/.test(this.resourcePath) && !force) {
    return source;
  }

<<<<<<< HEAD
  // The following part renders the template with lodash as a minimalistic loader
  //
  const template = _.template(source, { interpolate: /<%=([\s\S]+?)%>/g, variable: 'data', ...options });
  // Use __non_webpack_require__ to enforce using the native nodejs require
  // during template execution
  return 'var _ = __non_webpack_require__(' + JSON.stringify(require.resolve('lodash')) + ');' +
=======
  // The following part renders the template with lodash as aminimalistic loader
  //
  const template = _.template(source, _.defaults(options, { interpolate: /<%=([\s\S]+?)%>/g, variable: 'data' }));
  // Require !!lodash - using !! will disable all loaders (e.g. babel)
  return 'var _ = require(' + loaderUtils.stringifyRequest(this, '!!' + require.resolve('lodash')) + ');' +
>>>>>>> 2cfd330b (move react to root dir)
    'module.exports = function (templateParams) { with(templateParams) {' +
      // Execute the lodash template
      'return (' + template.source + ')();' +
    '}}';
};
