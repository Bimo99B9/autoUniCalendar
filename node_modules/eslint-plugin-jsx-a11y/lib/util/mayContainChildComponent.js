<<<<<<< HEAD
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
=======
'use strict';
>>>>>>> 2cfd330b (move react to root dir)

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
exports["default"] = mayContainChildComponent;

var _jsxAstUtils = require("jsx-ast-utils");

var _minimatch = _interopRequireDefault(require("minimatch"));

/**
 * Returns true if it can positively determine that the element lacks an
 * accessible label. If no determination is possible, it returns false. Treat
 * false as an unknown value. The element might still have an accessible label,
 * but this module cannot determine it positively.
 *
 * 
 */
function mayContainChildComponent(root, componentName) {
  var maxDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var elementType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _jsxAstUtils.elementType;
=======
exports.default = mayContainChildComponent;

var _jsxAstUtils = require('jsx-ast-utils');

function mayContainChildComponent(root, componentName) {
  var maxDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
>>>>>>> 2cfd330b (move react to root dir)

  function traverseChildren(node, depth) {
    // Bail when maxDepth is exceeded.
    if (depth > maxDepth) {
      return false;
    }
<<<<<<< HEAD

=======
>>>>>>> 2cfd330b (move react to root dir)
    if (node.children) {
      /* $FlowFixMe */
      for (var i = 0; i < node.children.length; i += 1) {
        /* $FlowFixMe */
<<<<<<< HEAD
        var childNode = node.children[i]; // Assume an expression container renders a label. It is the best we can
        // do in this case.

        if (childNode.type === 'JSXExpressionContainer') {
          return true;
        } // Check for comonents with the provided name.


        if (childNode.type === 'JSXElement' && childNode.openingElement && (0, _minimatch["default"])(elementType(childNode.openingElement), componentName)) {
          return true;
        }

=======
        var childNode = node.children[i];
        // Assume an expression container renders a label. It is the best we can
        // do in this case.
        if (childNode.type === 'JSXExpressionContainer') {
          return true;
        }
        // Check for comonents with the provided name.
        if (childNode.type === 'JSXElement' && childNode.openingElement && (0, _jsxAstUtils.elementType)(childNode.openingElement) === componentName) {
          return true;
        }
>>>>>>> 2cfd330b (move react to root dir)
        if (traverseChildren(childNode, depth + 1)) {
          return true;
        }
      }
    }
<<<<<<< HEAD

    return false;
  }

  return traverseChildren(root, 1);
}

module.exports = exports.default;
=======
    return false;
  }
  return traverseChildren(root, 1);
} /**
   * Returns true if it can positively determine that the element lacks an
   * accessible label. If no determination is possible, it returns false. Treat
   * false as an unknown value. The element might still have an accessible label,
   * but this module cannot determine it positively.
   *
   * 
   */
>>>>>>> 2cfd330b (move react to root dir)
