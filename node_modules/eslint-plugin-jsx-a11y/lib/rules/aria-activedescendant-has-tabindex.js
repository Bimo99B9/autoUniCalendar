<<<<<<< HEAD
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _ariaQuery = require("aria-query");

var _jsxAstUtils = require("jsx-ast-utils");

var _schemas = require("../util/schemas");

var _getElementType = _interopRequireDefault(require("../util/getElementType"));

var _getTabIndex = _interopRequireDefault(require("../util/getTabIndex"));

var _isInteractiveElement = _interopRequireDefault(require("../util/isInteractiveElement"));

/**
 * @fileoverview Enforce elements with aria-activedescendant are tabbable.
 * @author Jesse Beach <@jessebeach>
 */
// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------
var errorMessage = 'An element that manages focus with `aria-activedescendant` must have a tabindex';
var schema = (0, _schemas.generateObjSchema)();
var domElements = (0, _toConsumableArray2["default"])(_ariaQuery.dom.keys());
var _default = {
  meta: {
    docs: {
      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md',
      description: 'Enforce elements with aria-activedescendant are tabbable.'
    },
    schema: [schema]
  },
  create: function create(context) {
    var elementType = (0, _getElementType["default"])(context);
=======
'use strict';

var _ariaQuery = require('aria-query');

var _jsxAstUtils = require('jsx-ast-utils');

var _schemas = require('../util/schemas');

var _getTabIndex = require('../util/getTabIndex');

var _getTabIndex2 = _interopRequireDefault(_getTabIndex);

var _isInteractiveElement = require('../util/isInteractiveElement');

var _isInteractiveElement2 = _interopRequireDefault(_isInteractiveElement);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * @fileoverview Enforce elements with aria-activedescendant are tabbable.
                                                                                                                                                                                                     * @author Jesse Beach <@jessebeach>
                                                                                                                                                                                                     */

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

var errorMessage = 'An element that manages focus with `aria-activedescendant` must be tabbable';

var schema = (0, _schemas.generateObjSchema)();

var domElements = [].concat(_toConsumableArray(_ariaQuery.dom.keys()));

module.exports = {
  meta: {
    docs: {
      url: 'https://github.com/evcohen/eslint-plugin-jsx-a11y/tree/master/docs/rules/aria-activedescendant-has-tabindex.md'
    },
    schema: [schema]
  },

  create: function create(context) {
>>>>>>> 2cfd330b (move react to root dir)
    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        var attributes = node.attributes;

<<<<<<< HEAD
=======

>>>>>>> 2cfd330b (move react to root dir)
        if ((0, _jsxAstUtils.getProp)(attributes, 'aria-activedescendant') === undefined) {
          return;
        }

<<<<<<< HEAD
        var type = elementType(node); // Do not test higher level JSX components, as we do not know what
        // low-level DOM element this maps to.

        if (domElements.indexOf(type) === -1) {
          return;
        }

        var tabIndex = (0, _getTabIndex["default"])((0, _jsxAstUtils.getProp)(attributes, 'tabIndex')); // If this is an interactive element and the tabindex attribute is not specified,
        // or the tabIndex property was not mutated, then the tabIndex
        // property will be undefined.

        if ((0, _isInteractiveElement["default"])(type, attributes) && tabIndex === undefined) {
          return;
        }

        if (tabIndex >= -1) {
=======
        var type = (0, _jsxAstUtils.elementType)(node);
        // Do not test higher level JSX components, as we do not know what
        // low-level DOM element this maps to.
        if (domElements.indexOf(type) === -1) {
          return;
        }
        var tabIndex = (0, _getTabIndex2.default)((0, _jsxAstUtils.getProp)(attributes, 'tabIndex'));

        // If this is an interactive element, tabIndex must be either left
        // unspecified allowing the inherent tabIndex to obtain or it must be
        // zero (allowing for positive, even though that is not ideal). It cannot
        // be given a negative value.
        if ((0, _isInteractiveElement2.default)(type, attributes) && (tabIndex === undefined || tabIndex >= 0)) {
          return;
        }

        if (tabIndex >= 0) {
>>>>>>> 2cfd330b (move react to root dir)
          return;
        }

        context.report({
<<<<<<< HEAD
          node,
=======
          node: node,
>>>>>>> 2cfd330b (move react to root dir)
          message: errorMessage
        });
      }
    };
  }
<<<<<<< HEAD
};
exports["default"] = _default;
module.exports = exports.default;
=======
};
>>>>>>> 2cfd330b (move react to root dir)
