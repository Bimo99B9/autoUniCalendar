<<<<<<< HEAD
"use strict";
/*
  Copyright 2021 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModuleURL = void 0;
const assert_1 = require("assert");
const errors_1 = require("./errors");
const cdn = __importStar(require("../cdn-details.json"));
function getVersionedURL() {
    return `${getCDNPrefix()}/${cdn.latestVersion}`;
}
function getCDNPrefix() {
    return `${cdn.origin}/${cdn.bucketName}/${cdn.releasesDir}`;
}
function getModuleURL(moduleName, buildType) {
    (0, assert_1.ok)(moduleName, errors_1.errors['no-module-name']);
    if (buildType) {
        // eslint-disable-next-line  @typescript-eslint/no-unsafe-assignment
        const pkgJson = require(`${moduleName}/package.json`);
        if (buildType === 'dev' && pkgJson.workbox && pkgJson.workbox.prodOnly) {
            // This is not due to a public-facing exception, so just throw an Error(),
            // without creating an entry in errors.js.
            throw Error(`The 'dev' build of ${moduleName} is not available.`);
        }
        return `${getVersionedURL()}/${moduleName}.${buildType.slice(0, 4)}.js`;
    }
    return `${getVersionedURL()}/${moduleName}.js`;
}
exports.getModuleURL = getModuleURL;
=======
'use strict';

/*
  Copyright 2017 Google Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

var assert = require('assert');

var cdn = require('../cdn-details.json');
var errors = require('./errors');

var getCDNOrigin = function getCDNOrigin() {
  return `${cdn.origin}/${cdn.bucketName}/${cdn.releasesDir}`;
};

var getVersionedCDNUrl = function getVersionedCDNUrl() {
  return `${getCDNOrigin()}/${cdn.latestVersion}`;
};

var getModuleUrl = function getModuleUrl(moduleName, buildType) {
  assert(moduleName, errors['no-module-name']);

  if (buildType) {
    var pkgJson = require(`${moduleName}/package.json`);
    if (buildType === 'dev' && pkgJson.workbox.prodOnly) {
      // This is not due to a public-facing exception, so just throw an Error(),
      // without creating an entry in errors.js.
      throw Error(`The 'dev' build of ${moduleName} is not available.`);
    }
    return `${getVersionedCDNUrl()}/${moduleName}.${buildType.slice(0, 4)}.js`;
  }
  return `${getVersionedCDNUrl()}/${moduleName}.js`;
};

module.exports = {
  getCDNOrigin,
  getModuleUrl
};
>>>>>>> 2cfd330b (move react to root dir)
