/// <reference types="node" />
import { EventEmitter } from 'events';
<<<<<<< HEAD
declare function once<T>(emitter: EventEmitter, name: string): once.CancelablePromise<T>;
declare namespace once {
    interface CancelFunction {
        (): void;
    }
    interface CancelablePromise<T> extends Promise<T> {
        cancel: CancelFunction;
    }
    type CancellablePromise<T> = CancelablePromise<T>;
    function spread<T extends any[]>(emitter: EventEmitter, name: string): once.CancelablePromise<T>;
}
export = once;
=======
import { EventNames, EventListenerParameters, AbortSignal } from './types';
export interface OnceOptions {
    signal?: AbortSignal;
}
export default function once<Emitter extends EventEmitter, Event extends EventNames<Emitter>>(emitter: Emitter, name: Event, { signal }?: OnceOptions): Promise<EventListenerParameters<Emitter, Event>>;
>>>>>>> 2cfd330b (move react to root dir)
