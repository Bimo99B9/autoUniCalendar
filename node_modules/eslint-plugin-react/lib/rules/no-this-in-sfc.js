/**
 * @fileoverview Report "this" being used in stateless functional components.
 */
<<<<<<< HEAD

=======
>>>>>>> 2cfd330b (move react to root dir)
'use strict';

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');
<<<<<<< HEAD
const report = require('../util/report');
=======

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------

const ERROR_MESSAGE = 'Stateless functional components should not use this';
>>>>>>> 2cfd330b (move react to root dir)

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

<<<<<<< HEAD
const messages = {
  noThisInSFC: 'Stateless functional components should not use `this`',
};

=======
>>>>>>> 2cfd330b (move react to root dir)
module.exports = {
  meta: {
    docs: {
      description: 'Report "this" being used in stateless components',
      category: 'Possible Errors',
      recommended: false,
<<<<<<< HEAD
      url: docsUrl('no-this-in-sfc'),
    },

    messages,

    schema: [],
=======
      url: docsUrl('no-this-in-sfc')
    },
    schema: []
>>>>>>> 2cfd330b (move react to root dir)
  },

  create: Components.detect((context, components, utils) => ({
    MemberExpression(node) {
      if (node.object.type === 'ThisExpression') {
        const component = components.get(utils.getParentStatelessComponent());
<<<<<<< HEAD
        if (!component || (component.node && component.node.parent && component.node.parent.type === 'Property')) {
          return;
        }
        report(context, messages.noThisInSFC, 'noThisInSFC', {
          node,
        });
      }
    },
  })),
=======
        if (!component) {
          return;
        }
        context.report({
          node: node,
          message: ERROR_MESSAGE
        });
      }
    }
  }))
>>>>>>> 2cfd330b (move react to root dir)
};
