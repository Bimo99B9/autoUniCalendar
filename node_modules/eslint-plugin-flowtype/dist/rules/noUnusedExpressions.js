<<<<<<< HEAD
"use strict";
=======
'use strict';
>>>>>>> 2cfd330b (move react to root dir)

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
exports.default = void 0;

var _getBuiltinRule = require("../utilities/getBuiltinRule");

// A wrapper around ESLint's core rule no-unused-expressions, additionally ignores type cast
// expressions.
const noUnusedExpressionsRule = (0, _getBuiltinRule.getBuiltinRule)('no-unused-expressions');
const {
  meta
} = noUnusedExpressionsRule;

const create = context => {
  const coreChecks = noUnusedExpressionsRule.create(context);
  return {
    ExpressionStatement(node) {
      if (node.expression.type === 'TypeCastExpression' || node.expression.type === 'OptionalCallExpression') {
        return;
      } // eslint-disable-next-line @babel/new-cap


      coreChecks.ExpressionStatement(node);
    }

  };
};

var _default = {
  create,
  meta
};
exports.default = _default;
module.exports = exports.default;
=======

var _noUnusedExpressions = require('eslint/lib/rules/no-unused-expressions');

var _noUnusedExpressions2 = _interopRequireDefault(_noUnusedExpressions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var meta = _noUnusedExpressions2.default.meta; // A wrapper around ESLint's core rule no-unused-expressions, additionally ignores type cast
// expressions.

var create = function create(context) {
  var coreChecks = _noUnusedExpressions2.default.create(context);

  return {
    ExpressionStatement(node) {
      if (node.expression.type !== 'TypeCastExpression') {
        coreChecks.ExpressionStatement(node);
      }
    }
  };
};

exports.default = {
  create,
  meta
};
module.exports = exports['default'];
>>>>>>> 2cfd330b (move react to root dir)
