<<<<<<< HEAD
=======
/**
 * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

>>>>>>> 2cfd330b (move react to root dir)
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
<<<<<<< HEAD
exports.default = void 0;

function _util() {
  const data = require('util');

  _util = function () {
    return data;
  };

  return data;
}

function _v() {
  const data = require('v8');

  _v = function () {
    return data;
  };

  return data;
}

function _vm() {
  const data = require('vm');

  _vm = function () {
    return data;
  };

  return data;
}

function _jestGetType() {
  const data = require('jest-get-type');

  _jestGetType = function () {
    return data;
  };

  return data;
}

function _prettyFormat() {
  const data = require('pretty-format');

  _prettyFormat = function () {
    return data;
  };

  return data;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

const tick = (0, _util().promisify)(setImmediate);

class LeakDetector {
  constructor(value) {
    _defineProperty(this, '_isReferenceBeingHeld', void 0);

    if ((0, _jestGetType().isPrimitive)(value)) {
=======

var _prettyFormat;

function _load_prettyFormat() {
  return (_prettyFormat = _interopRequireDefault(require('pretty-format')));
}

var _v;

function _load_v() {
  return (_v = _interopRequireDefault(require('v8')));
}

var _vm;

function _load_vm() {
  return (_vm = _interopRequireDefault(require('vm')));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

exports.default = class {
  constructor(value) {
    if (this._isPrimitive(value)) {
>>>>>>> 2cfd330b (move react to root dir)
      throw new TypeError(
        [
          'Primitives cannot leak memory.',
          'You passed a ' +
            typeof value +
            ': <' +
<<<<<<< HEAD
            (0, _prettyFormat().format)(value) +
=======
            (0, (_prettyFormat || _load_prettyFormat()).default)(value) +
>>>>>>> 2cfd330b (move react to root dir)
            '>'
        ].join(' ')
      );
    }

    let weak;

    try {
      // eslint-disable-next-line import/no-extraneous-dependencies
<<<<<<< HEAD
      weak = require('weak-napi');
=======
      weak = require('weak');
>>>>>>> 2cfd330b (move react to root dir)
    } catch (err) {
      if (!err || err.code !== 'MODULE_NOT_FOUND') {
        throw err;
      }

      throw new Error(
<<<<<<< HEAD
        'The leaking detection mechanism requires the "weak-napi" package to be installed and work. ' +
=======
        'The leaking detection mechanism requires the "weak" package to be installed and work. ' +
>>>>>>> 2cfd330b (move react to root dir)
          'Please install it as a dependency on your main project'
      );
    }

    weak(value, () => (this._isReferenceBeingHeld = false));
<<<<<<< HEAD
    this._isReferenceBeingHeld = true; // Ensure value is not leaked by the closure created by the "weak" callback.

    value = null;
  }

  async isLeaking() {
    this._runGarbageCollector(); // wait some ticks to allow GC to run properly, see https://github.com/nodejs/node/issues/34636#issuecomment-669366235

    for (let i = 0; i < 10; i++) {
      await tick();
    }
=======
    this._isReferenceBeingHeld = true;

    // Ensure value is not leaked by the closure created by the "weak" callback.
    value = null;
  }

  isLeaking() {
    this._runGarbageCollector();
>>>>>>> 2cfd330b (move react to root dir)

    return this._isReferenceBeingHeld;
  }

  _runGarbageCollector() {
<<<<<<< HEAD
    const isGarbageCollectorHidden = !global.gc; // GC is usually hidden, so we have to expose it before running.

    (0, _v().setFlagsFromString)('--expose-gc');
    (0, _vm().runInNewContext)('gc')(); // The GC was not initially exposed, so let's hide it again.

    if (isGarbageCollectorHidden) {
      (0, _v().setFlagsFromString)('--no-expose-gc');
    }
  }
}

exports.default = LeakDetector;
=======
    const isGarbageCollectorHidden = !global.gc;

    // GC is usually hidden, so we have to expose it before running.
    (_v || _load_v()).default.setFlagsFromString('--expose-gc');
    (_vm || _load_vm()).default.runInNewContext('gc')();

    // The GC was not initially exposed, so let's hide it again.
    if (isGarbageCollectorHidden) {
      (_v || _load_v()).default.setFlagsFromString('--no-expose-gc');
    }
  }

  _isPrimitive(value) {
    return value !== Object(value);
  }
};
>>>>>>> 2cfd330b (move react to root dir)
