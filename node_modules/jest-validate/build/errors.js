'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
<<<<<<< HEAD
exports.errorMessage = void 0;

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  };

  return data;
}

function _jestGetType() {
  const data = require('jest-get-type');

  _jestGetType = function () {
    return data;
  };

  return data;
}

var _condition = require('./condition');

var _utils = require('./utils');
=======
exports.errorMessage = undefined;

var _chalk;

function _load_chalk() {
  return (_chalk = _interopRequireDefault(require('chalk')));
}

var _jestGetType;

function _load_jestGetType() {
  return (_jestGetType = _interopRequireDefault(require('jest-get-type')));
}

var _utils;

function _load_utils() {
  return (_utils = require('./utils'));
}
>>>>>>> 2cfd330b (move react to root dir)

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

/**
<<<<<<< HEAD
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const errorMessage = (option, received, defaultValue, options, path) => {
  const conditions = (0, _condition.getValues)(defaultValue);
  const validTypes = Array.from(
    new Set(conditions.map(_jestGetType().getType))
  );
  const message = `  Option ${_chalk().default.bold(
    `"${path && path.length > 0 ? path.join('.') + '.' : ''}${option}"`
  )} must be of type:
    ${validTypes.map(e => _chalk().default.bold.green(e)).join(' or ')}
  but instead received:
    ${_chalk().default.bold.red((0, _jestGetType().getType)(received))}

  Example:
${formatExamples(option, conditions)}`;
  const comment = options.comment;
  const name = (options.title && options.title.error) || _utils.ERROR;
  throw new _utils.ValidationError(name, message, comment);
};

exports.errorMessage = errorMessage;

function formatExamples(option, examples) {
  return examples.map(
    e => `  {
    ${_chalk().default.bold(`"${option}"`)}: ${_chalk().default.bold(
      (0, _utils.formatPrettyObject)(e)
    )}
  }`
  ).join(`

  or

`);
}
=======
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

const errorMessage = (exports.errorMessage = (
  option,
  received,
  defaultValue,
  options,
  path
) => {
  const message = `  Option ${(_chalk || _load_chalk()).default.bold(
    `"${path && path.length > 0 ? path.join('.') + '.' : ''}${option}"`
  )} must be of type:
    ${(_chalk || _load_chalk()).default.bold.green(
      (0, (_jestGetType || _load_jestGetType()).default)(defaultValue)
    )}
  but instead received:
    ${(_chalk || _load_chalk()).default.bold.red(
      (0, (_jestGetType || _load_jestGetType()).default)(received)
    )}

  Example:
  {
    ${(_chalk || _load_chalk()).default.bold(`"${option}"`)}: ${(
    _chalk || _load_chalk()
  ).default.bold(
    (0, (_utils || _load_utils()).formatPrettyObject)(defaultValue)
  )}
  }`;

  const comment = options.comment;
  const name =
    (options.title && options.title.error) || (_utils || _load_utils()).ERROR;

  throw new (_utils || _load_utils()).ValidationError(name, message, comment);
});
>>>>>>> 2cfd330b (move react to root dir)
