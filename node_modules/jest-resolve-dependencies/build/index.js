'use strict';

<<<<<<< HEAD
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.DependencyResolver = void 0;

function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
    return data;
  };

  return data;
}

function _jestSnapshot() {
  const data = require('jest-snapshot');

  _jestSnapshot = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
=======
var _jestSnapshot;

function _load_jestSnapshot() {
  return (_jestSnapshot = _interopRequireDefault(require('jest-snapshot')));
}

var _jestRegexUtil;

function _load_jestRegexUtil() {
  return (_jestRegexUtil = require('jest-regex-util'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

const snapshotDirRegex = new RegExp(
  (0, (_jestRegexUtil || _load_jestRegexUtil()).replacePathSepForRegex)(
    '/__snapshots__/'
  )
);
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

const snapshotFileRegex = new RegExp(
  (0, (_jestRegexUtil || _load_jestRegexUtil()).replacePathSepForRegex)(
    `__snapshots__/(.*).${
      (_jestSnapshot || _load_jestSnapshot()).default.EXTENSION
    }`
  )
);
const isSnapshotPath = path => !!path.match(snapshotDirRegex);
>>>>>>> 2cfd330b (move react to root dir)

/**
 * DependencyResolver is used to resolve the direct dependencies of a module or
 * to retrieve a list of all transitive inverse dependencies.
 */
class DependencyResolver {
<<<<<<< HEAD
  constructor(resolver, hasteFS, snapshotResolver) {
    _defineProperty(this, '_hasteFS', void 0);

    _defineProperty(this, '_resolver', void 0);

    _defineProperty(this, '_snapshotResolver', void 0);

    this._resolver = resolver;
    this._hasteFS = hasteFS;
    this._snapshotResolver = snapshotResolver;
=======
  constructor(resolver, hasteFS) {
    this._resolver = resolver;
    this._hasteFS = hasteFS;
>>>>>>> 2cfd330b (move react to root dir)
  }

  resolve(file, options) {
    const dependencies = this._hasteFS.getDependencies(file);
<<<<<<< HEAD

=======
>>>>>>> 2cfd330b (move react to root dir)
    if (!dependencies) {
      return [];
    }

<<<<<<< HEAD
    return dependencies.reduce((acc, dependency) => {
      if (this._resolver.isCoreModule(dependency)) {
        return acc;
      }

      let resolvedDependency;
      let resolvedMockDependency;

      try {
        resolvedDependency = this._resolver.resolveModule(
          file,
          dependency,
          options
        );
      } catch {
        try {
          resolvedDependency = this._resolver.getMockModule(file, dependency);
        } catch {
          // leave resolvedDependency as undefined if nothing can be found
        }
      }

      if (!resolvedDependency) {
        return acc;
      }

      acc.push(resolvedDependency); // If we resolve a dependency, then look for a mock dependency
      // of the same name in that dependency's directory.

      try {
        resolvedMockDependency = this._resolver.getMockModule(
          resolvedDependency,
          path().basename(dependency)
        );
      } catch {
        // leave resolvedMockDependency as undefined if nothing can be found
      }

      if (resolvedMockDependency) {
        const dependencyMockDir = path().resolve(
          path().dirname(resolvedDependency),
          '__mocks__'
        );
        resolvedMockDependency = path().resolve(resolvedMockDependency); // make sure mock is in the correct directory

        if (dependencyMockDir === path().dirname(resolvedMockDependency)) {
          acc.push(resolvedMockDependency);
        }
      }

      return acc;
    }, []);
  }

  resolveInverseModuleMap(paths, filter, options) {
=======
    return dependencies
      .map(dependency => {
        if (this._resolver.isCoreModule(dependency)) {
          return null;
        }
        try {
          return this._resolver.resolveModule(file, dependency, options);
        } catch (e) {}
        return this._resolver.getMockModule(file, dependency);
      })
      .filter(Boolean);
  }

  resolveInverse(paths, filter, options) {
>>>>>>> 2cfd330b (move react to root dir)
    if (!paths.size) {
      return [];
    }

<<<<<<< HEAD
    const collectModules = (related, moduleMap, changed) => {
      const visitedModules = new Set();
      const result = [];

      while (changed.size) {
        changed = new Set(
          moduleMap.reduce((acc, module) => {
            if (
              visitedModules.has(module.file) ||
              !module.dependencies.some(dep => changed.has(dep))
            ) {
              return acc;
            }

            const file = module.file;

            if (filter(file)) {
              result.push(module);
              related.delete(file);
            }

            visitedModules.add(file);
            acc.push(file);
            return acc;
          }, [])
        );
      }

      return result.concat(
        Array.from(related).map(file => ({
          dependencies: [],
          file
        }))
      );
=======
    const collectModules = (relatedPaths, moduleMap, changed) => {
      const visitedModules = new Set();
      while (changed.size) {
        changed = new Set(
          moduleMap
            .filter(
              module =>
                !visitedModules.has(module.file) &&
                module.dependencies.some(dep => dep && changed.has(dep))
            )
            .map(module => {
              const file = module.file;
              if (filter(file)) {
                relatedPaths.add(file);
              }
              visitedModules.add(file);
              return module.file;
            })
        );
      }
      return relatedPaths;
>>>>>>> 2cfd330b (move react to root dir)
    };

    const relatedPaths = new Set();
    const changed = new Set();
<<<<<<< HEAD

    for (const path of paths) {
      if (this._hasteFS.exists(path)) {
        const modulePath = (0, _jestSnapshot().isSnapshotPath)(path)
          ? this._snapshotResolver.resolveTestPath(path)
          : path;
        changed.add(modulePath);

=======
    for (const path of paths) {
      if (this._hasteFS.exists(path)) {
        // /path/to/__snapshots__/test.js.snap is always adjacent to
        // /path/to/test.js
        const modulePath = isSnapshotPath(path)
          ? path.replace(snapshotFileRegex, '$1')
          : path;
        changed.add(modulePath);
>>>>>>> 2cfd330b (move react to root dir)
        if (filter(modulePath)) {
          relatedPaths.add(modulePath);
        }
      }
    }
<<<<<<< HEAD

    const modules = [];

    for (const file of this._hasteFS.getAbsoluteFileIterator()) {
      modules.push({
        dependencies: this.resolve(file, options),
        file
      });
    }

    return collectModules(relatedPaths, modules, changed);
  }

  resolveInverse(paths, filter, options) {
    return this.resolveInverseModuleMap(paths, filter, options).map(
      module => module.file
    );
  }
}

exports.DependencyResolver = DependencyResolver;
=======
    const modules = this._hasteFS.getAllFiles().map(file => ({
      dependencies: this.resolve(file, options),
      file: file
    }));
    return Array.from(collectModules(relatedPaths, modules, changed));
  }
}

module.exports = DependencyResolver;
>>>>>>> 2cfd330b (move react to root dir)
